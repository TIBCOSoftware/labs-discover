"use strict";
/**
 * Event Manager Service
 * TIBCO Cloud(TM) Live Apps maintains an audit trail that records various business events that occur during the lifecycle of a Case - for example, when the Case was started and by whom, or when the Case state or data changed and what that change was.   An __AuditEvent__ is a map of attributes (name/value pairs), which provide the audit details about a specific business event. Each AuditEvent includes the following attributes:  * __key__: Unique key value that identifies this AuditEvent within the audit trail * __id__: The unique identifier of the AuditEvent * __type__: The type of the AuditEvent * __creationTime__: Date and time on which this AuditEvent was created * __message__: Description of the AuditEvent * __messageId__: The identifier for the type of AuditEvent that occurred * __severity__: Severity level of the AuditEvent - for example, AUDIT, WARN or ERROR * __subscriptionId__: The unique identifier of the subscription to which the AuditEvent belongs * _other context-specific attributes_: Provides information relevant to the particular AuditEvent - for example, caseId, processId or userId     The TIBCO(R) Live Apps Event Manager Service allows you to retrieve AuditEvents for a specific Case. An audit trail is represented by a series of AuditEvents.  __Note__: An AuditEvent is only stored for a specific period of time (the AuditRetentionPeriod), which is defined for the subscription. An AuditEvent is removed when this period has expired.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: liveapps@tibco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextAttribute = void 0;
/**
* A name/value pair providing context information for this error
*/
class ContextAttribute {
    static getAttributeTypeMap() {
        return ContextAttribute.attributeTypeMap;
    }
}
exports.ContextAttribute = ContextAttribute;
ContextAttribute.discriminator = undefined;
ContextAttribute.attributeTypeMap = [
    {
        "name": "name",
        "baseName": "name",
        "type": "string"
    },
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    }
];
//# sourceMappingURL=contextAttribute.js.map