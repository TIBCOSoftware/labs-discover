"use strict";
/**
 * Business Process Management Service
 * The TIBCO(R) Live Apps Business Process Management Service manages the following resources:  * __Case Creator processes__: A Case Creator process is a process definition containing the business logic used to create a Case - this may simply be a single step process that provides a form for a user to complete, or a more involved sequence of steps. An application designer creates at least one Case Creator process when they create an application in Live Apps Designer. A user creates a Process Instance when they use Live Apps Case Manager to start a Case.     * __Case Action processes__: A Case Action process is a process definition containing the business logic used to execute some sort of unscheduled action on an active Case. An application designer creates as many Case Action processes as they need when they create an application in Live Apps Designer. A user creates a Process Instance when they use Live Apps Case Manager to execute an Action on an existing Case.    * __Process Instances__: A Process Instance is a particular instance of a Case Creator process or a Case Action process.   * Process Instance __States__: A Process Instance is, at any time, in one of the following States: STARTED, ACTIVE, COMPLETED, DELAYED, CANCELLED, HALTED or UNKNOWN. Process Instance States are system-defined values representing logical stages in the lifecycle of a process and are used by every Process Instance.     Note: Process Instance States should not be confused with Case states, which are application-defined values representing logical stages in the lifecycle of a Case. An application designer creates whatever Case states they need when they create an application in Live Apps Designer. They can configure the application to only allow users to execute a particular Case Action (that is, start a Process Instance of a Case Action process) when a Case is in a particular (Case) state.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: liveapps@tibco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstancesApi = exports.InstancesApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'http://localhost/process/v1';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var InstancesApiApiKeys;
(function (InstancesApiApiKeys) {
})(InstancesApiApiKeys = exports.InstancesApiApiKeys || (exports.InstancesApiApiKeys = {}));
class InstancesApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[InstancesApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     *
     * @summary Returns summary information about a specified Process Instance.
     * @param id The unique identifier of the Process Instance.
     */
    getInstance(id, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/instances/{id}'
                .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getInstance.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    request_1.default(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Instance");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Information is returned only for Process Instances to which the current User has access.
     * @summary Returns summary information about Process Instances that match the specified query parameters.
     * @param $sandbox The id of the Sandbox from which to return data. (You can obtain Sandbox Ids using the GET /sandboxes method in the Authorization Engine Service.)
     * @param $filter A filter expression that defines the Process Instances to be returned. The expression can contain the following operands:  * __caseReference__ (required if \&#39;state\&#39; is not used): The reference of the specific Case for which Process Instances should be returned.  * __state__ (required if \&#39;caseReference\&#39; is not used): The identifier of the specific State for which Process Instances should be returned. This must be one of the following strings: \&#39;STARTING\&#39;, \&#39;ACTIVE\&#39;, \&#39;COMPLETED\&#39;, \&#39;CANCELLED, \&#39;DELAYED\&#39; or \&#39;HALTED\&#39;.  Supported operators: \&#39;eq\&#39;  Note: Either \&#39;caseReference\&#39; or \&#39;state\&#39; must be specified, or both can be specified by using the \&#39;AND\&#39; operator.  For example, the following string returns all Process Instances for caseReference \&#39;35\&#39; that are currently \&#39;ACTIVE\&#39;:     $filter&#x3D;caseReference eq 35 and state eq \&#39;ACTIVE\&#39;
     * @param $skip The number of items to exclude from the results list, counting from the beginning of the list. The value must be 0 or greater. For example, &#x60;$skip&#x3D;80&#x60; results in the first 80 items in the results list being ignored. Subsequent items are returned, starting with the 81st item in the list.   Note: \&#39;$top\&#39; must also be used if \&#39;$skip\&#39; is used.
     * @param $top The maximum number of items to be returned from the results list (with the first item determined by the value of the $skip parameter). The value of $top must be 1 or greater. For example, &#x60;$top&#x3D;20&#x60; returns 20 items from the results list, or all the results if the list contains 20 or fewer items.  Note: \&#39;$skip\&#39; must also be used if \&#39;$top\&#39; is used.
     */
    listInstances($sandbox, $filter, $skip, $top, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/instances';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter '$sandbox' is not null or undefined
            if ($sandbox === null || $sandbox === undefined) {
                throw new Error('Required parameter $sandbox was null or undefined when calling listInstances.');
            }
            if ($sandbox !== undefined) {
                localVarQueryParameters['$sandbox'] = models_1.ObjectSerializer.serialize($sandbox, "string");
            }
            if ($filter !== undefined) {
                localVarQueryParameters['$filter'] = models_1.ObjectSerializer.serialize($filter, "string");
            }
            if ($skip !== undefined) {
                localVarQueryParameters['$skip'] = models_1.ObjectSerializer.serialize($skip, "number");
            }
            if ($top !== undefined) {
                localVarQueryParameters['$top'] = models_1.ObjectSerializer.serialize($top, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    request_1.default(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "Array<Instance>");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.InstancesApi = InstancesApi;
//# sourceMappingURL=instancesApi.js.map