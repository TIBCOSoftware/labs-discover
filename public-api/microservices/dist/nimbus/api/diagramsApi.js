"use strict";
/**
 * TIBCO Nimbus Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagramsApi = exports.DiagramsApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const models_1 = require("../model/models");
const models_2 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://nimbus.tenant-integration.tcie.pro/01FJBTV4SKXGQVB9ENR654CSFX/ctrlwebisapi.dll';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var DiagramsApiApiKeys;
(function (DiagramsApiApiKeys) {
    DiagramsApiApiKeys[DiagramsApiApiKeys["ApiKeyAuth"] = 0] = "ApiKeyAuth";
})(DiagramsApiApiKeys = exports.DiagramsApiApiKeys || (exports.DiagramsApiApiKeys = {}));
class DiagramsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'ApiKeyAuth': new models_2.ApiKeyAuth('header', 'Authorization'),
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DiagramsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     * Create a new child diagram by specifying the parent diagram and object. For this operation to be successful the parent must be an unlocked draft that the user has permission to update.
     * @summary Create a new child diagram.
     * @param mapAndDiagramId A string parameter that contains a map id and a diagram id separated by a period. eg : 0:9CB21226514442E0967F1250FA1EDFCB.C750D64DB9FC4174B42EEE7C8A93E9D2
     * @param parentObjectId A UUID string value that identifies the parent object for a child diagram. This is normally an activity but can also be an image or textbox.
     * @param layout Direction to use when automatically positioning diagram objects.
     * @param itemsPerLine Maximum number of objects to include per line. If this value is set to zero then all objects will appear in one continuous row or column.
     * @param objectWidth Width to use for activities and text boxes
     * @param objectHeight Height to use for activities and text boxes
     * @param horzGap Width of the gap to place between activities.
     * @param vertGap Height of the gap to place between activities.
     * @param diagramModel
     */
    createDiagram(mapAndDiagramId, parentObjectId, layout, itemsPerLine, objectWidth, objectHeight, horzGap, vertGap, diagramModel, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/v1/diagrams/{mapAndDiagramId}/parent/{parentObjectId}'
                .replace('{' + 'mapAndDiagramId' + '}', encodeURIComponent(String(mapAndDiagramId)))
                .replace('{' + 'parentObjectId' + '}', encodeURIComponent(String(parentObjectId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'mapAndDiagramId' is not null or undefined
            if (mapAndDiagramId === null || mapAndDiagramId === undefined) {
                throw new Error('Required parameter mapAndDiagramId was null or undefined when calling createDiagram.');
            }
            // verify required parameter 'parentObjectId' is not null or undefined
            if (parentObjectId === null || parentObjectId === undefined) {
                throw new Error('Required parameter parentObjectId was null or undefined when calling createDiagram.');
            }
            if (layout !== undefined) {
                localVarQueryParameters['layout'] = models_1.ObjectSerializer.serialize(layout, "'None' | 'Rows' | 'Columns'");
            }
            if (itemsPerLine !== undefined) {
                localVarQueryParameters['itemsPerLine'] = models_1.ObjectSerializer.serialize(itemsPerLine, "number");
            }
            if (objectWidth !== undefined) {
                localVarQueryParameters['objectWidth'] = models_1.ObjectSerializer.serialize(objectWidth, "number");
            }
            if (objectHeight !== undefined) {
                localVarQueryParameters['objectHeight'] = models_1.ObjectSerializer.serialize(objectHeight, "number");
            }
            if (horzGap !== undefined) {
                localVarQueryParameters['horzGap'] = models_1.ObjectSerializer.serialize(horzGap, "number");
            }
            if (vertGap !== undefined) {
                localVarQueryParameters['vertGap'] = models_1.ObjectSerializer.serialize(vertGap, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(diagramModel, "DiagramModel")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.ApiKeyAuth.apiKey) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    request_1.default(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "DiagramModel");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Create a new child diagram by specifying the parent diagram and activity. For this operation to be successful the parent must be an unlocked draft that the user has permission to update.
     * @summary Create a new child diagram.
     * @param mapAndDiagramId A string parameter that contains a map id and a diagram id separated by a period. eg : 0:9CB21226514442E0967F1250FA1EDFCB.C750D64DB9FC4174B42EEE7C8A93E9D2
     * @param parentActivityId An integer value that identifies the activity that will drill-down to the new diagram.
     * @param layout Direction to use when automatically positioning diagram objects.
     * @param itemsPerLine Maximum number of objects to include per line. If this value is set to zero then all objects will appear in one continuous row or column.
     * @param objectWidth Width to use for activities and text boxes
     * @param objectHeight Height to use for activities and text boxes
     * @param horzGap Width of the gap to place between activities.
     * @param vertGap Height of the gap to place between activities.
     * @param diagramModel
     */
    createDiagram2(mapAndDiagramId, parentActivityId, layout, itemsPerLine, objectWidth, objectHeight, horzGap, vertGap, diagramModel, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/v1/diagrams/{mapAndDiagramId}/parent-activity/{parentActivityId}'
                .replace('{' + 'mapAndDiagramId' + '}', encodeURIComponent(String(mapAndDiagramId)))
                .replace('{' + 'parentActivityId' + '}', encodeURIComponent(String(parentActivityId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'mapAndDiagramId' is not null or undefined
            if (mapAndDiagramId === null || mapAndDiagramId === undefined) {
                throw new Error('Required parameter mapAndDiagramId was null or undefined when calling createDiagram2.');
            }
            // verify required parameter 'parentActivityId' is not null or undefined
            if (parentActivityId === null || parentActivityId === undefined) {
                throw new Error('Required parameter parentActivityId was null or undefined when calling createDiagram2.');
            }
            if (layout !== undefined) {
                localVarQueryParameters['layout'] = models_1.ObjectSerializer.serialize(layout, "'None' | 'Rows' | 'Columns'");
            }
            if (itemsPerLine !== undefined) {
                localVarQueryParameters['itemsPerLine'] = models_1.ObjectSerializer.serialize(itemsPerLine, "number");
            }
            if (objectWidth !== undefined) {
                localVarQueryParameters['objectWidth'] = models_1.ObjectSerializer.serialize(objectWidth, "number");
            }
            if (objectHeight !== undefined) {
                localVarQueryParameters['objectHeight'] = models_1.ObjectSerializer.serialize(objectHeight, "number");
            }
            if (horzGap !== undefined) {
                localVarQueryParameters['horzGap'] = models_1.ObjectSerializer.serialize(horzGap, "number");
            }
            if (vertGap !== undefined) {
                localVarQueryParameters['vertGap'] = models_1.ObjectSerializer.serialize(vertGap, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(diagramModel, "DiagramModel")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.ApiKeyAuth.apiKey) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    request_1.default(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "DiagramModel");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Delete an existing diagram. The diagram must be an unlocked draft that the user has write access to. The delete diagram will be stored in the deletion recovery manager for a period of time before being finally purged. It is not possible to delete the level 1 diagram.
     * @summary Delete an existing diagram.
     * @param mapAndDiagramId A string parameter that contains a map id and a diagram id separated by a period. eg : 0:9CB21226514442E0967F1250FA1EDFCB.C750D64DB9FC4174B42EEE7C8A93E9D2
     */
    deleteDiagram(mapAndDiagramId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/v1/diagrams/{mapAndDiagramId}'
                .replace('{' + 'mapAndDiagramId' + '}', encodeURIComponent(String(mapAndDiagramId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'mapAndDiagramId' is not null or undefined
            if (mapAndDiagramId === null || mapAndDiagramId === undefined) {
                throw new Error('Required parameter mapAndDiagramId was null or undefined when calling deleteDiagram.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.ApiKeyAuth.apiKey) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    request_1.default(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Fetch the full definition of a single diagram including its layout.
     * @summary Returns a single diagram from a specific map.
     * @param mapAndDiagramId A string parameter that contains a map id and a diagram id separated by a period. eg : 0:9CB21226514442E0967F1250FA1EDFCB.C750D64DB9FC4174B42EEE7C8A93E9D2
     * @param languageId An integer value that identifies a specific language in the repository.
     */
    getDiagram(mapAndDiagramId, languageId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/v1/diagrams/{mapAndDiagramId}'
                .replace('{' + 'mapAndDiagramId' + '}', encodeURIComponent(String(mapAndDiagramId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'mapAndDiagramId' is not null or undefined
            if (mapAndDiagramId === null || mapAndDiagramId === undefined) {
                throw new Error('Required parameter mapAndDiagramId was null or undefined when calling getDiagram.');
            }
            if (languageId !== undefined) {
                localVarQueryParameters['languageId'] = models_1.ObjectSerializer.serialize(languageId, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.ApiKeyAuth.apiKey) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    request_1.default(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "DiagramModel");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Query a range of diagrams from a single map by specifying a map id and an optional diagram title or parent diagram id.
     * @summary Query a range of diagrams from a single map.
     * @param mapId Id of the map to search in.
     * @param name Name to search for.
     * @param parentDiagramId Id of the parent diagram to search in.
     * @param languageId An integer value that identifies a specific language in the repository.
     */
    getDiagrams(mapId, name, parentDiagramId, languageId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/v1/diagrams';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (mapId !== undefined) {
                localVarQueryParameters['mapId'] = models_1.ObjectSerializer.serialize(mapId, "string");
            }
            if (name !== undefined) {
                localVarQueryParameters['name'] = models_1.ObjectSerializer.serialize(name, "string");
            }
            if (parentDiagramId !== undefined) {
                localVarQueryParameters['parentDiagramId'] = models_1.ObjectSerializer.serialize(parentDiagramId, "string");
            }
            if (languageId !== undefined) {
                localVarQueryParameters['languageId'] = models_1.ObjectSerializer.serialize(languageId, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.ApiKeyAuth.apiKey) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    request_1.default(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "DiagramCollection");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Update an existing diagram. For this operation to be successful the diagram must be an unlocked draft that the user has permission to update.
     * @summary Update an existing diagram.
     * @param mapAndDiagramId A string parameter that contains a map id and a diagram id separated by a period. eg : 0:9CB21226514442E0967F1250FA1EDFCB.C750D64DB9FC4174B42EEE7C8A93E9D2
     * @param layout Direction to use when automatically positioning diagram objects.
     * @param itemsPerLine Maximum number of objects to include per line. If this value is set to zero then all objects will appear in one continuous row or column.
     * @param objectWidth Width to use for activities and text boxes
     * @param objectHeight Height to use for activities and text boxes
     * @param horzGap Width of the gap to place between activities.
     * @param vertGap Height of the gap to place between activities.
     * @param diagramModel
     */
    updateDiagram(mapAndDiagramId, layout, itemsPerLine, objectWidth, objectHeight, horzGap, vertGap, diagramModel, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/api/v1/diagrams/{mapAndDiagramId}'
                .replace('{' + 'mapAndDiagramId' + '}', encodeURIComponent(String(mapAndDiagramId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'mapAndDiagramId' is not null or undefined
            if (mapAndDiagramId === null || mapAndDiagramId === undefined) {
                throw new Error('Required parameter mapAndDiagramId was null or undefined when calling updateDiagram.');
            }
            if (layout !== undefined) {
                localVarQueryParameters['layout'] = models_1.ObjectSerializer.serialize(layout, "'None' | 'Rows' | 'Columns'");
            }
            if (itemsPerLine !== undefined) {
                localVarQueryParameters['itemsPerLine'] = models_1.ObjectSerializer.serialize(itemsPerLine, "number");
            }
            if (objectWidth !== undefined) {
                localVarQueryParameters['objectWidth'] = models_1.ObjectSerializer.serialize(objectWidth, "number");
            }
            if (objectHeight !== undefined) {
                localVarQueryParameters['objectHeight'] = models_1.ObjectSerializer.serialize(objectHeight, "number");
            }
            if (horzGap !== undefined) {
                localVarQueryParameters['horzGap'] = models_1.ObjectSerializer.serialize(horzGap, "number");
            }
            if (vertGap !== undefined) {
                localVarQueryParameters['vertGap'] = models_1.ObjectSerializer.serialize(vertGap, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(diagramModel, "DiagramModel")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.ApiKeyAuth.apiKey) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    request_1.default(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            body = models_1.ObjectSerializer.deserialize(body, "DiagramModel");
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.DiagramsApi = DiagramsApi;
//# sourceMappingURL=diagramsApi.js.map