openapi: 3.0.1
info:
  title: TIBCO Discover public API
  description: TIBCO Discover public API
  license:
    name: TIBCO
    url: http://tibco.com
  version: 1.0.0
externalDocs:
  description: Find out more about Discover app
  url: https://www.tibco.com/solutions/process-mining-solutions
servers:
  - url: https://discover.cloud.tibco.com
    description: The remote api servers
  - url: https://discover.labs.tibcocloud.com
    description: The production api server
  - url: http://localhost:8080
    description: The local Dev api server
security:
  - bearerAuth: []
tags:
  - name: Catalog
    description: The datasets API to create, update, delete dataset for Discover app.
  - name: Repository
    description: The analysis API to create, update, delete analysis for Discover app.
  - name: Visualisation
    description: The templates API to create, update, delete templates for Discover app.
  - name: Configuration
    description: The configuration API to create, update, delete configuration for Discover app.
  - name: Investigations
    description: The Investigation API to create, update, delete investigations for Discover app.
  - name: Documentations
    description: The documentation API to export, import Graphs from Nimbus with Discover app.
paths:
  /catalog/datasets:
    get:
      tags:
        - Catalog
      description: Get all linked dataset from the tcmd discover app
      summary: Get All Datasets of Discover Application
      operationId: getAllDatasets
      responses:
        '200':
          description: Returns all the datasets that associated with the TIBCO CLOUD Discover web application.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref:  "#/components/schemas/DatasetListItem"
        '400':
          description: Bad request. The auth token is missing
        '401':
          description: Unauthorized. The auth token is not valid.
  /catalog/dataset/{id}:
    get:
      tags:
        - Catalog
      description: Get the dataset details by a given dataset id.
      summary: Get dataset details.
      operationId: getDataset
      parameters:
        - name: id
          description: dataset id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the dataset detail.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '400':
          description: Bad request. The auth token is missing
        '401':
          description: Unauthorized. The auth token is not valid.
        '404':
          description: Record not found.
    delete:
      tags:
        - Catalog
      description: Delete dataset of given id.
      summary: Delete dataset.
      operationId: deleteDataset
      parameters:
        - name: id
          description: dataset id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Record deleted.
        '400':
          description: Bad request. The auth token is missing
        '401':
          description: Unauthorized. The auth token is not valid.
        '409':
          description: The dataset can not be deleted because of associated analysis.
    put:
      tags:
        - Catalog
      description: Update dataset.
      summary: Update dataset after it is created
      operationId: updateDataset
      parameters:
        - name: id
          description: dataset id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/Dataset'
      responses:
        '200':
          description: Returns the dataset id.
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/DatasetUpdated'
        '400':
          description: Bad request. The auth token is missing or the dataset id in payload is different with the id in path parameter
        '401':
          description: Unauthorized. The auth token is not valid.
        '409':
          description: The dataset with the same name is already exist.
  /catalog/dataset/{id}/preview:
    get:
      tags:
        - Catalog
      description: Get the dataset preview for a given dataset id.
      summary: Get dataset preview.
      operationId: getPreview
      parameters:
        - name: id
          description: dataset id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the dataset preview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preview'
        '400':
          description: Bad request. The auth token is missing
  /catalog/dataset/exist:
    post:
      tags:
        - Catalog
      description: Check whether the dataset is existing with name and id. If id is present in payload then check whether there is a dataset with the same name of different dataset id other than the specified one.
      summary: Check whether the dataset is existing with name and id. 
      operationId: IsSameNameDatasetExist
      requestBody:
        description: The name and id
        content:
          "application/json": 
            schema: 
              $ref: '#/components/schemas/CheckExist'
      responses:
        '200':
          description: Returns the dataset detail.
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/CheckExistResult'
        '400':
          description: Bad request. The auth token is missing
        '401':
          description: Unauthorized. The auth token is not valid.
  /catalog/dataset:
    post:
      tags:
        - Catalog
      description: Create a new dataset
      summary: Create a new dataset
      operationId: createDataset
      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/Dataset'
      responses:
        '200':
          description: Returns the dataset id.
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/DatasetUpdated'
        '400':
          description: Bad request. The auth token is missing
        '401':
          description: Unauthorized. The auth token is not valid.
        '409':
          description: The dataset of the name is already exist.
  /catalog/status:
    post:
      tags:
        - Catalog
      description: The api for process mining backend to send the real time status to dataset.
      summary: Save dataset preview status
      operationId: saveStatus
      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/PreviewStatus'
      responses:
        '200':
          description: Returns the dataset id.
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/DatasetUpdated'
        '400':
          description: Bad request. The auth token is missing
        '401':
          description: Unauthorized. The auth token is not valid.
        '409':
          description: The dataset of the name is already exist.
  /catalog/status/{id}:
    get:
      tags:
        - Catalog
      description: The api for process mining backend to send the real time status to dataset.
      summary: Save dataset preview status
      operationId: getStatus
      parameters:
        - name: id
          description: dataset id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the dataset id.
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/PreviewStatus'
        '400':
          description: Bad request. The auth token is missing
        '401':
          description: Unauthorized. The auth token is not valid.
        '404':
          description: The dataset of the id is not found.
  /catalog/dataset/preview:
    post:
      tags:
        - Catalog
      description: Save dataset and trigger the data preview asynchronously. 
      summary: Save dataset and start preview
      operationId: saveDatasetAndStartPreview
      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/Dataset'
      responses:
        '200':
          description: Returns the dataset id and redis update status.
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/DatasetUpdated'
        '400':
          description: Bad request. The auth token is missing or data source of dataset is missing.
        '401':
          description: Unauthorized. The auth token is not valid.
  /catalog/preview/{id}:
    post:
      tags:
        - Catalog
      description: Rerun the preview process for the existing dataset.
      summary: Rerun preview.
      operationId: refreshPreview
      parameters:
        - name: id
          description: dataset id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The request of refresh preview is received.
        '401':
          description: Unauthorized. The auth token is not valid.
        '404':
          description: Dataset not found.
  /catalog/files:
    get:
      tags:
        - Catalog
      description: Rerun the unmanaged csv files in s3 bucket.
      summary: Get unmanaged csv files.
      operationId: getUnmanagedCsvFiles
      responses:
        '400':
          description: Bad request. The auth token is missing.
        '401':
          description: Unauthorized. The auth token is not valid.
        '200':
          description: Dataset not found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CsvFile"
    post:
      tags:
        - Catalog
      summary: Upload files to backend storage
      description: Upload files to backend storage
      operationId: uploadCsvFile
      requestBody:
        description: csv
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUpload'
      responses:
        '200':
          description: Add response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionPerformedFiles'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionPerformedFiles'
  /catalog/files/{filename}:
    delete:
      tags:
        - Catalog
      description: Delete the csv file from S3 bucket. See https://discover.labs.tibcocloud.com/backswagger#/Files%20Operations/deleteRouteSegment
      summary: Delete the csv file from S3 bucket.
      parameters:
        - name: filename
          description: The csv file name
          in: path
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Bad request. The auth token is missing.
        '401':
          description: Unauthorized. The auth token is not valid.
        '409':
          description: Conflict. The csv file is used by dataset.
        '406':
          description: Delete file on backend fails. 
        '204':
          description: The deleting file resquest is accepted.
  /catalog/files/preview/{filename}:
    get:
      tags:
        - Catalog
      description: Get the preview data of the unmanaged csv file.
      summary: Get the preview data of the unmanaged csv file.
      operationId: getUnmanagedCsvData
      parameters:
        - name: filename
          description: The csv file name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the csv file preview data in string.
          content:
            "application/json":
              schema:
                type: array
                items: 
                  type: string
        '400':
          description: Bad request. The auth token is missing
        '401':
          description: Unauthorized. The auth token is not valid.
        '404':
          description: The csv file is not found.
  /catalog/files/download/{filename}:
    get:
      tags:
        - Catalog
      description: Download the csv file
      summary: Download teh uploaded csv file.
      operationId: downloadCsvFile
      parameters:
        - name: filename
          description: The csv file name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the csv file preview data in string.
          content:
            "text/csv":
              schema:
                type: string
                format: binary
        '400':
          description: Bad request. The auth token is missing
        '401':
          description: Unauthorized. The auth token is not valid.
        '404':
          description: The csv file is not found.
        '500':
          description: Internal server error.
  /catalog/tdv/data/{id}:
    get:
      tags:
        - Catalog
      description: Get the preview data of managed csv file using the dataset id. The Discover backend return the data in string, in this api, the string is parsed to JSON before return.
      summary: Get the preview data of the managed csv file.
      operationId: getManagedCsvData
      parameters:
        - name: id
          description: The dataset id.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns the csv file preview data in JSON.
          content:
            "application/json":
              schema:
                type: array
                items: 
                  type: object
        '400':
          description: Bad request. The auth token is missing
        '401':
          description: Unauthorized. The auth token is not valid.
        '404':
          description: The dataset is not found.
        '500':
          description: The dataset cannot be parsed to JSON.
  /catalog/tdv/metadata/{id}:
    get:
      tags:
        - Catalog
      summary: Get Schema of a TDV
      description: Get Schema of a specified DataSource
      operationId: getTdvMetaData
      parameters:
        - name: id
          in: path
          description: The dataset id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchemaTdv'
        '500':
          description: Internal server error
  /catalog/tdv/unmanaged/view:
    get:
      tags:
        - Catalog
      summary: Get List of customer published views in unmanaged TDV
      description: Get List of published views
      operationId: getUnmanagedTdv
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublishedViews'
        '500':
          description: Internal server error
  /catalog/tdv/unmanaged/copy:
    post:
      tags:
        - Catalog
      summary: Copy an unmanaged views into our system
      description: Copy an unmanaged views into our system
      operationId: copyUnmanagedTdv
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnManageDataSetCopy'
            example:
              DatasetName: CallCenter
              Annotation: Some Call center logs
              DatasetPath: /somewhere/in/dark/path
              Organization: 01dxjp1rpa35bzcv1kvem9ffyk
      responses:
        '200':
          description: response
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error

  /repository/analysis:
    get:
      description: Get all analysis.
      tags: [Repository]
      summary: Get all analysis for TIBCO Labs Discover.
      operationId: getAnalysis
      responses:
        200:
          description: Returns all analysis.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Analysis'
        400:
          description: Bad request. The auth token is missing
    post:
      description: Create a new analysis.
      tags: [Repository]
      summary: Create a new analysis.
      operationId: createAnalysis
      requestBody:
          description: The analysis data to create.
          content: 
            "application/json":
              schema:
                $ref: '#/components/schemas/AnalysisRequest'
      responses:
        200:
          description: Analysis is created succesfully.
        401:
          description: Bad request. The auth token is missing
  /repository/analysis/{id}:
    get:
      description: Get an analysis.
      tags: [Repository]
      summary: Get a analysis for TIBCO Labs Discover.
      operationId: getAnalysisDetails
      parameters:
        - name: id
          in: path
          description: Analysis id to get.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns an analysis.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Analysis"
        400:
          description: Bad request. The auth token is missing
        404:
          description: Record not found.
    put:
      description: Update an analysis.
      tags: [Repository]
      summary: Update an analysis for TIBCO Labs Discover.
      operationId: updateAnalysis
      parameters:
        - name: id
          in: path
          description: Analysis id to update.
          required: true
          schema:
            type: string
      requestBody:
        description: The analysis to update.
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/AnalysisRequest'
      responses:
        200:
          description: Update an analysis.
        401:
          description: Bad request. The auth token is missing
        404:
          description: Record not found.
    delete:
      description: Delete an analysis.
      tags: [Repository]
      summary: Delete an analysis for TIBCO Labs Discover.
      operationId: deleteAnalysis
      parameters:
        - name: id
          in: path
          description: Analysis id to delete.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete a analysis.
        401:
          description: Bad request. The auth token is missing
        404:
          description: Record not found.
  /repository/analysis/{id}/template/{templateId}:
    post:
      description: Assign a template to an analysis.
      tags: [Repository]
      summary: Assign a template to an analysis.
      operationId: setAnalysisTemplate
      parameters:
        - name: id
          in: path
          description: Analysis id to set the template.
          required: true
          schema:
            type: "string"
        - name: templateId
          in: path
          description: TemplateId to be assigned to the analysis.
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: Delete a analysis.
        401:
          description: Bad request. The auth token is missing
        404:
          description: Record not found.
  /repository/analysis/{id}/action/{action}:
    post:
      description: Execute an action for an analysis.
      tags: [Repository]
      summary: Execute an action for an analysis.
      operationId: runAnalysisAction
      parameters:
        - name: id
          in: path
          description: Analysis id to execute the action.
          required: true
          schema:
            type: "string"
        - name: action
          in: path
          description: Action to be executed.
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: Delete a analysis.
        401:
          description: Bad request. The auth token is missing
        404:
          description: Record not found.
        405:
          description: Action is not available
  /repository/analysis/{id}/status:
    get:
      description: Returns the status the analysis is.
      tags: [Repository]
      summary: Returns the status the analysis is.
      parameters:
        - name: 'id'
          in: 'path'
          description: Analysis id to update.
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: Returns an analysis status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisStatus"
        400:
          description: Bad request. The auth token is missing
        404:
          description: Record not found.
    post:
      description: Report the spark job asociated to the current analysis.
      tags: [Repository]
      summary: Report the status for the proces mining jobspark job asociated to the current analysis.
      operationId: reportStatusForAnalysis
      parameters:
        - name: 'id'
          in: 'path'
          description: Analysis id to update.
          required: true
          schema:
            type: "string"
      requestBody:
          description: The analysis data to create.
          content: 
            "application/json":
              schema:
                $ref: '#/components/schemas/AnalysisStatus'
      responses:
        200:
          description: The analysis status is reported succesfully.
        401:
          description: Bad request. The auth token is missing
  /visualisation/templates:
    get:
      description: Get all templates.
      tags: [Visualisation]
      summary: Get all templates for TIBCO Labs Discover.
      operationId: getTemplates
      responses:
        200:
          description: Returns all templates.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
        400:
          description: Bad request. The auth token is missing
    post:
      description: Create a new template.
      tags: [Visualisation]
      summary: Create a new template.
      operationId: createTemplate
      requestBody:
        description: The template to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateRequest'
      responses:
        200:
          description: Template is created succesfully.
        400:
          description: Bad request. The auth token is missing
  /visualisation/templates/{id}:
    get:
      description: Get a template.
      tags: [Visualisation]
      summary: Get a template for TIBCO Labs Discover.
      operationId: getTemplate
      parameters:
        - name: id
          in: path
          description: Template unique identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a template.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        400:
          description: Bad request. The auth token is missing
        404:
          description: Record not found.
    put:
      description: Update a template.
      tags: [Visualisation]
      summary: Update a template for TIBCO Labs Discover.
      operationId: updateTemplate
      parameters:
        - name: id
          in: path
          description: Template unique identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: The template to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
      responses:
        200:
          description: Update a template.
        400:
          description: Bad request. The auth token is missing
        404:
          description: Template not found.
    delete:
      description: Delete a template.
      tags: [Visualisation]
      summary: Delete a template for TIBCO Labs Discover.
      operationId: deleteTemplate
      parameters:
        - name: id
          in: path
          description: Template unique identifier.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete a template.
        400:
          description: Bad request. The auth token is missing
        404:
          description: Record not found.
  /visualisation/items:
    get:
      description: Get all available analytics visualisation for the templates.
      tags: [Visualisation]
      summary: Get all available analytics visualisation for the templates for TIBCO Labs Discover.
      operationId: getItems
      parameters:
        - name: type
          in: query
          description: Element type to return. If not value is provided, it returns available DXPs
          required: false
          schema:
            type: string
            enum:
              - dxp
              - folder
      responses:
        '200':
          description: Returns all available analytics visualisation for the templates.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Visualisation"
        400:
          description: Bad request. The auth token is missing
  /configuration:
    get:
      description: Get the configuration for the app
      tags: [Configuration]
      summary: Get the configuration for TIBCO Labs Discover.
      operationId: getConfiguration
      responses:
        200:
          description: Application configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverConfiguration'
        400:
          description: Bad request. The auth token is missing
  /configuration/general:
    get:
      description: Get the general configuration for the app
      tags: [Configuration]
      summary: Get the general configuration for TIBCO Labs Discover.
      operationId: getGeneralConfiguration
      responses:
        200:
          description: General application configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralInformation'
        400:
          description: Bad request. The auth token is missing
    post:
      description: Modify the general configuration for the app
      tags: [Configuration]
      summary: Modify the general configuration
      operationId: postGeneralConfiguration
      requestBody:
        description: General application configuration to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralInformation'
      responses:
        200:
          description: General application configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralInformation'
        400:
          description: Bad request. The auth token is missing
  /configuration/landingpages:
    get:
      description: Get the landing page configuration for the app
      tags: [Configuration]
      summary: Get the landing pages configuration for TIBCO Labs Discover.
      operationId: getLandingPagesConfiguration
      responses:
        200:
          description: Landing page configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPage'
        400:
          description: Bad request. The auth token is missing
    post:
      description: Modify the landing page configuration for the app
      tags: [Configuration]
      summary: Modify the landing page configuration
      operationId: postLandingPagesConfiguration
      requestBody:
        description: Landing page application configuration to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LandingPage'
      responses:
        200:
          description: Landing page configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LandingPage'
        400:
          description: Bad request. The auth token is missing
  /configuration/messages:
    get:
      description: Get the messages configuration for the app
      tags: [Configuration]
      summary: Get the messages configuration for TIBCO Labs Discover.
      operationId: getMessagesConfiguration
      responses:
        '200':
          description: Messages configuration.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Message'
        400:
          description: Bad request. The auth token is missing
    post:
      description: Modify the messages configuration for the app
      tags: [Configuration]
      summary: Modify the messages configuration
      operationId: postMessagesConfiguration
      requestBody:
        description: Messages configuration to update.
        content:
          application/json:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/Message'
      responses:
        200:
          description: Messages configuration.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Message'
        400:
          description: Bad request. The auth token is missing
  /configuration/formats:
    get:
      description: Get the formats configuration for the app
      tags: [Configuration]
      summary: Get the formats configuration for TIBCO Labs Discover.
      operationId: getFormatsConfiguration
      responses:
        '200':
          description: Formats configuration.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/FieldFormats'
        400:
          description: Bad request. The auth token is missing
    post:
      description: Modify the formats configuration for the app
      tags: [Configuration]
      summary: Modify the formats configuration
      operationId: postFormatsConfiguration
      requestBody:
        description: Formats configuration to update.
        content:
          application/json:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/FieldFormats'
      responses:
        200:
          description: Formats configuration.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/FieldFormats'
        400:
          description: Bad request. The auth token is missing
    
  /configuration/investigations:
    get:
      description: Get the investigations configuration for the app
      tags: [Configuration]
      summary: Get the investigations configuration for TIBCO Labs Discover.
      operationId: getInvestigations
      responses:
        '200':
          description: Investigations configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investigations'
        400:
          description: Bad request. The auth token is missing
    post:
      description: Modify the investigations configuration for the app
      tags: [Configuration]
      summary: Modify the investigations configuration
      operationId: postInvestigations
      requestBody:
        description: Investigations configuration to update.
        content:
          application/json:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/InvestigationApplication'
      responses:
        200:
          description: Investigations configuration.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvestigationApplication'
        400:
          description: Bad request. The auth token is missing
  /configuration/analytics:
    get:
      description: Get the analytics configuration for the app
      tags: [Configuration]
      summary: Get the analytics configuration for TIBCO Labs Discover.
      operationId: getAnalytics
      responses:
        200:
          description: Analytics configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analytics'
        400:
          description: Bad request. The auth token is missing
    post:
      description: Modify the analytics configuration for the app
      tags: [Configuration]
      summary: Modify the analytics configuration
      operationId: postAnalytics
      requestBody:
        description: Analytics application configuration to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Analytics'
      responses:
        200:
          description: Analytics configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analytics'
        400:
          description: Bad request. The auth token is missing
  /configuration/automap:
    get:
      description: Get the automap configuration for the app
      tags: [Configuration]
      summary: Get the automap configuration for TIBCO Labs Discover.
      operationId: getAutomap
      responses:
        200:
          description: Automap configuration.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Automapping'
        400:
          description: Bad request. The auth token is missing
    post:
      description: Modify the automap configuration for the app
      tags: [Configuration]
      summary: Modify the automap configuration
      operationId: postAutomap
      requestBody:
        description: Automap configuration to update.
        content:
          application/json:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/Automapping'
      responses:
        200:
          description: Investigations configuration.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Automapping'
        400:
          description: Bad request. The auth token is missing
  /configuration/whoami:
    get:
      description: Get the user configuration
      tags: [Configuration]
      summary: Get the user configuration for TIBCO Labs Discover.
      operationId: getWhoAmI
      responses:
        200:
          description: Automap configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WhoAmI'
        400:
          description: Bad request. The auth token is missing
  /investigation/{appId}:
    get:
      description: Get the investiation cases for an id
      tags: [Investigations]
      summary: Returns the investigations for an id
      operationId: getInvestigationDestilsForId
      parameters:
        - name: appId
          description: application id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns the dataset id.
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvestigationDetails'
        400:
          description: Bad request. The auth token is missing      
  /investigation/{appId}/{investigationId}/{state}/actions:
    get:
      description: Get the available actions for an investigationAppId
      tags: [Investigations]
      summary: Returns all the possible actions for a given investigationAppId
      operationId: getActionsForInvestigation
      parameters:
        - name: appId
          description: Application ID
          in: path
          required: true
          schema: 
            type: string
        - name: investigationId
          description: Investigation ID
          in: path
          required: true
          schema: 
            type: string
        - name: state
          description: State
          in: path
          required: true
          schema: 
            type: string
      responses:
        200:
          description: Returns the actions for the given investigation.
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvestigationActions'
        400:
          description: Bad request. The auth token is missing      
  /investigation/applications:
    get:
      description: Get the possible applications that can be used to create investigations
      tags: [Investigations]
      summary: Get the possible applications that can be used to create investigations for TIBCO Labs Discover.
      operationId: getAllApplications
      responses:
        '200':
          description: Available applications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        400:
          description: Bad request. The auth token is missing
  /investigation/{appId}/definition:
    get:
      description: Get the application definition info by appId
      tags: [Investigations]
      summary: Get the application definition info by appId.
      operationId: getApplicationDefinition
      parameters:
        - name: appId
          description: application id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Available applications.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestigationApplicationDefinition'
        400:
          description: Bad request. The auth token is missing
  /investigation/{appId}/{creatorId}/start:
    post:
      description: Create an investigation
      tags: [Investigations]
      summary: Create an investigation
      operationId: postStartCaseForInvestigation
      parameters:
        - name: appId
          description: application id
          in: path
          required: true
          schema:
            type: string
        - name: creatorId
          description: creator Id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Data to create a new investigation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestigationCreateRequest'
      responses:
        200:
          description: Analytics configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestigationCreateResponse'
        400:
          description: Bad request. The auth token is missing
  /documentation/folders/{folderId}:
    get:
      description: list all available folders as structured JSON
      tags: [Documentations]
      summary: get all available folders
      operationId: getFolders
      parameters:
        - name: folderId
          description: folder Id
          in: path
          required: true
          schema:
            type: number
      responses:
        200:
          description: Feedback from Documentation System, containing Structure of all folders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapFolderCollection' 
        400:
          description: Bad request. The auth token is missing
  /documentation/folders:
    get:
      description: list all available root folders as structured JSON
      tags: [Documentations]
      summary: get all available root folders
      operationId: getRootFolders
      responses:
        200:
          description: Feedback from Documentation System, containing Structure of all folders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapFolderCollection' 
        400:
          description: Bad request. The auth token is missing
  /documentation/folder:
    post:
      description: create new folder in structure at given parent folder ID
      tags: [Documentations]
      summary: create new folder
      operationId: postFolder
      requestBody:
        description: create new folder in structure, under given parent folder ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderModel'
      responses:
        200:
          description: Feedback from Documentation System, as MapFolderModel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapFolderModel'
        400:
          description: Bad request. The auth token is missing
  /documentation/exportGraph/{folderId}/{graphname}:
    post:
      description: export Discover graph JSON into given Documenation folder ID
      tags: [Documentations]
      summary: export Discover Graph into Documentation folder
      operationId: postExport
      parameters:
        - name: folderId
          description: folder Id
          in: path
          required: true
          schema:
            type: number
        - name: graphname
          description: graph name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Graph JSON Data for export function
        content:
          application/json:
            schema:
              type: object
      responses:
        200:
          description: Feedback from Documentation System, JSON of the created Map.
          content:
            application/json:
              schema:
                type: object
        400:
          description: Bad request. The auth token is missing
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: CIC oauth token
  schemas:
    DatasetListItem:
      type: object
      properties:
        datasetid:
          type: string
          description: The dataset id assigned by Process mining process.
        name:
          type: string
          description: The name of the dataset
        fileName:
          type: string
          description: The csv file name.
        filePath:
          type: string
          description: The csv full path.
        description:
          type: string
          description: The dataset description.
        createdDate:
          type: integer
          description: The dataset created datetime.
        status:
          type: string
          description: The final status of dataset preview which is returned by process mining.
          example: COMPLETED
        lastPreviewDate:
          type: integer
          description: The datetime of last data preview. 
        type:
          type: string
          description: The type of the dataset.
          example: csv
        message:
          type: string
          description: The error message.
    Dataset:
      type: object
      properties:
        Dataset_Id:
          type: string
          description: The dataset id.
        Dataset_Name:
          type: string
          description: The name of the dataset
        Dataset_Description:
          type: string
          description: The description of the dataset
        schema:
          type: array
          description: The columns of the csv file
          items:
            $ref: '#/components/schemas/Schema'
        Dataset_Source:
          type: object
          description: The dataset source properties.
          $ref: '#/components/schemas/DatasetSource'
        createdDate:
          type: integer
          description: The dataset created datetime.
        updatedDate:
          type: integer
          description: The dateset updated datetime.
        status:
          type: string
          description: The final data preview status
        lastPreviewDate:
          type: integer
          description: The last data preview datetime.
        PublishedView:
          type: string
          description: The published view data source path.
        previewStatus:
          type: object
          description: The latest preview status received from process minning
          $ref: '#/components/schemas/PreviewStatus'
        TdvView:
          type: object
          description: The tdv entry of dataset if it is created from a tdv view.
          $ref:  "#/components/schemas/PublishedViews"
        CsvFile:
          type: object
          description: The csv file object if it is create from an unmanaged csv file
          $ref:  "#/components/schemas/RedisFileInfo"
        type:
          type: string
          description: The type of dataset
          example: csv
        csvMethod:
          type: string
          description: The method of csv file is set.
          example: file
        deleted:
          type: boolean
          description: Whether the dataset is marked as deleted.
    DatasetSource:
      type: object
      properties:
        DatasourceType:
          type: string
          description: The data source type
          example: File-Delimited
        Encoding:
          type: string
          description: The charset encoding of the data source file
          example: UTF-8
        FileEscapeChar:
          type: string
          description: The escape char of the data source file
        FileHeaders:
          type: boolean
          description: Whether the data source csv file has column headers
        FileName:
          type: string
          description: The file name of the data source csv file.
        FilePath:
          type: string
          description: The S3 url of data source file
        FileQuoteChar:
          type: string
          description: The quote char of the data source file
        FileSeparator:
          type: string
          description: The separator char to parse the data source file.
      required:
        - Encoding
    Schema:
      type: object
      properties:
        key:
          type: string
          description: The column header name of the csv file.
        type:
          type: string
          description: The value type of the column, such timestamp, numeric, string, int
          example: timestamp
        format:
          type: string
          description: The timestamp format of the value. It's 'None' if the type is not timestamp
          example: mm/dd/yyyy HH:MM
        featureType:
          type: string
          description: The feature type. It's None if no featureType is set.
        importance:
          type: string
          description: The property to describe how important the column is in process mining
          example: Low
        id:
          type: integer
          description: The asset id of the column in TIBCO Cloud Metadata.
    PreviewColumn:
      type: object
      properties:
        position:
          type: number
        columnName:
          type: string
        type:
          type: string
    PreviewRow:
      type: object
      example: '[{
        "case Spend area text": "Specialty Resins",
        "event org resource": "user_121",
        "event concept name": "Create Purchase Order Item",
        "case Item Category": "3-way match, invoice before GR",
        "event Cumulative net worth": "55694.0",
        "case GR-Based Inv Verif": false,
        "case Sub spend area text": "Area",
        "case Purchasing Document": 00000000,
        "case Name": "vendor_0252",
        "event time timestamp": "16-07-2018 11:15:00.000",
        "case Company": "companyID_0000",
        "case Goods Receipt": true,
        "case Spend classification text": "PR",
        "case Item": 10,
        "event User": "user_121",
        "eventID ": 08324823428342834,
        "case Item Type": "Standard",
        "case Document Type": "Standard PO",
        "case Purch Doc Category name": "Purchase order",
        "case Vendor": "vendorID_0259",
        "case concept:name": "0342842834h2834",
        "case Source": "sourceSystemID_0000"}]'  
    Preview:
      type: object
      properties:
        columns:
          type: array
          items:   
            $ref: '#/components/schemas/PreviewColumn'
        data:
          type: array
          items: 
            $ref: '#/components/schemas/PreviewRow'
    PreviewStatus:
      type: object
      properties:
        Organisation:
          type: string
          description: The orgId which is the subscription id in CIC.
        JobName:
          type: string
          description: The spark job name
        DatasetID:
          type: string
          description: The dataset id.
        Message:
          type: string
          description: The Message describing the process mining status.
        Level:
          type: string
          description: The log level
          example: INFO
        Progression:
          type: integer
          description: The progress of preview. It's a number from 0 to 100. 0 means error. 100 means the preview process is completed.
        TimeStamp:
          type: integer
          description: The timestamp of the status.
    CheckExist:
      type: object
      properties:
        Dataset_Id:
          type: string
          description: The dataset id
        Dataset_Name:
          type: string
          description: The dataset name
      required:
        - "Dataset_Id"
    CheckExistResult:
      type: object
      properties:
        exist:
          type: boolean
          description: It's true is the dataset of the name is found, otherwise return false. 
    DatasetUpdated:
      type: object
      properties:
        status:
          type: string
          description: The status returned from Redis server
        datasetId:
          type: string
          description: The dataset id.
    PublishedViews:
      required:
        - Annotation
        - CreationTime
        - DatasetName
        - DatasetPath
        - ModificationTime
      type: object
      properties:
        DatasetName:
          type: string
        Annotation:
          type: string
        DatasetPath:
          type: string
        CreationTime:
          type: integer
        ModificationTime:
          type: integer
    RedisFileInfo:
      required:
        - ContentType
        - Encoding
        - EscapeChar
        - FileLocation
        - FileSize
        - LastModified
        - OriginalEncoding
        - OriginalFilename
        - OriginalNewLine
        - QuoteChar
        - Separator
        - newline
      type: object
      description: The copy of the backend redisFileInfo model. See https://discover.labs.tibcocloud.com/backswagger#/Files%20Operations/getRouteFileV2
      properties:
        ContentType:
          type: string
        LastModified:
          type: string
        OriginalFilename:
          type: string
        OriginalEncoding:
          type: string
        FileSize:
          type: string
        newline:
          type: string
        EscapeChar:
          type: string
        QuoteChar:
          type: string
        Separator:
          type: string
        Encoding:
          type: string
        OriginalNewLine:
          type: string
        FileLocation:
          type: string
    CsvFile:
      type: object
      description: The csv file info returned from backend and whether it is used by dataset.
      properties:
        redisFileInfo:
          $ref: "#/components/schemas/RedisFileInfo"
        beingUsed:
          type: boolean
          description: Whether it is used by any dataset.
    FileUpload:
      required:
        - csv
        - encoding
        - escapeChar
        - newline
        - quoteChar
        - separator
      type: object
      properties:
        newline:
          type: string
        separator:
          type: string
        quoteChar:
          type: string
        encoding:
          type: string
        escapeChar:
          type: string
        csv:
          type: string
          format: binary
    ActionPerformedFiles:
      required:
        - code
        - file
        - message
      type: object
      properties:
        message:
          type: string
        file:
          type: string
        code:
          type: integer
    SchemaTdv:
      required:
        - COLUMN_NAME
        - DATA_TYPE
        - JDBC_DATA_TYPE
        - ORDINAL_POSITION
      type: object
      properties:
        COLUMN_NAME:
          type: string
        DATA_TYPE:
          type: string
        ORDINAL_POSITION:
          type: number
          format: double
        JDBC_DATA_TYPE:
          type: number
          format: double
    UnManageDataSetCopy:
      required:
        - DatasetName
        - DatasetPath
        - Organization
      type: object
      properties:
        DatasetName:
          type: string
        Annotation:
          type: string
        DatasetPath:
          type: string
        Organization:
          type: string



    Analysis:
      type: object
      properties:
        id:
          description: Analysis ID
          type: string
          example: dc1f7291-bb89-4974-98e8-6ab9303ceb03-0
        data: 
          $ref: "#/components/schemas/AnalysisData"
        metadata: 
          $ref: "#/components/schemas/AnalysisMetadata"
        metrics: 
          $ref: "#/components/schemas/AnalysisMetrics"
        actions:
          type: array
          items:
            type: string
      required:
        - data
        - metadata
        - actions
    AnalysisData:
      type: object
      properties:
        name: 
          description: TBD
          type: string
          example: 
        description:
          description: TBD
          type: string
          example: 
        datasetId:
          description: TBD
          type: string
          example: 
        templateId:
          description: TBD
          type: string
          example: 
        templateLabel:
          description: Template label
          type: string
        mappings:
          $ref: "#/components/schemas/Mapping"
        filters:
          type: array
          items:
            $ref: "#/components/schemas/TypeValue"
        groups:
          type: array
          items:
            $ref: "#/components/schemas/TypeValue"
        progress:
          description: TBD
          type: number
          example: 35
      required:
        - name
        - description
        - datasetId
        - mappings
    AnalysisRequest:
      type: object
      properties:
        name: 
          description: TBD
          type: string
          example: 
        description:
          description: TBD
          type: string
          example: 
        datasetId:
          description: TBD
          type: string
          example: 
        mappings:
          $ref: "#/components/schemas/Mapping"
        filters:
          type: array
          items:
            $ref: "#/components/schemas/TypeValue"
        groups:
          type: array
          items:
            $ref: "#/components/schemas/TypeValue"
      required:
        - name
        - description
        - datasetId
        - mappings
    TypeValue:
      type: object
      properties:
        name: 
          description: TBD
          type: string
        description:
          description: TBD
          type: string
        category:
          description: TBD
          type: string
        values: 
          description: TBD
          type: array
          items:
            type: string
        includeEmpty: 
          description: TBD
          type: boolean
      required:
        - type
        - value
    Mapping:
      type: object
      properties:
        caseId: 
          description: TBD
          type: string
          example: PAM-000003
        activity: 
          description: TBD
          type: string
          example: 
        startTime:
          description: TBD
          type: string
          example: 
        endTime:
          description: TBD
          type: string
          example: 
        scheduledStart:
          description: TBD
          type: string
          example: 
        scheduledEnd:
          description: TBD
          type: string
          example: 
        requester:
          description: TBD
          type: string
          example: 
        resource:
          description: TBD
          type: string
          example: 
        resourceGroup:
          description: TBD
          type: string
          example: 
        otherAttributes:
          description: TBD
          type: boolean
          example: 
      required:
        - caseId
        - activity
        - startTime
    AnalysisStatus:
      type: object
      properties:
        organisation: 
          description: TBD
          type: string
          example:
        jobName:
          description: TBD
          type: string
          example:
        analysisId:
          description: TBD
          type: string
          example:
        message:
          description: TBD
          type: string
          example:
        level:  
          description: TBD
          type: string
          enum:
            - ERROR
            - INFO
          example: INFO
        progression:
          description: TBD
          type: number
          example: 35
        timestamp: 
          description: TBD
          type: string
          example:
    AnalysisMetadata:
      type: object
      properties:
        state:
          description: TBD
          type: string
          example: 
        message:
          description: TBD
          type: string
          example: 
        createdBy: 
          description: TBD
          type: string
          example: 
        createdOn: 
          description: TBD
          type: string
          example: 
        modifiedBy: 
          description: TBD
          type: string
          example: 
        modifiedOn: 
          description: TBD
          type: string
          example: 
        lockedBy: 
          description: TBD
          type: string
          example: 
        lockedOn: 
          description: TBD
          type: string
          example: 
    AnalysisMetrics: 
      type: object
      properties:
        numEvents: 
          type: number
        numCases:
          type: number
        numActivities:
          type: number
        numVariants:
          type: number
        numResources:
          type: number
        avgTime:
          type: number
        medianTime:
          type: number
        minTime:
          type: number
        maxTime:
          type: number
        avgActivities:
          type: number
        minActivities:
          type: number
        maxActivities:
          type: number
        avgResourcesPerCases:
          type: number
        minResourcesPerCases:
          type: number
        maxResourcesPerCases:
          type: number
        minTimestamp:
          type: string
          format: date-time 
        maxTimestamp:
          type: string
          format: date-time 

    TemplateRequest:
      type: object
      properties:
        template:
          $ref: "#/components/schemas/Template"
        visualisation:
          $ref: "#/components/schemas/NewVisualisationInformation"
      required:
        - template
    Template:
      type: object
      properties:
        id:
          description: Unique Identifier for a Template
          type: string
          example: 1
        name: 
          description: Template name
          type: string
          example: Healthcare
        type: 
          description: The type of template. General and Vertical are provided and can't be edited. User defined templates can be modified.
          type: string
          enum: [General, Vertical, User defined]
          example: Vertical
        description: 
          description: HTML enabled field to describe a template on a card.
          type: string
          example: This template is suited to discover how your processes are executed.
        splash: 
          description: Location of an Icon or Image to display on the card.
          type: string
          example: 
        spotfireLocation: 
          description: Location of the Spotfire Report to use for this template
          type: string
          example: /Teams/01DZBGCE4XGN899ZQ7NS238VK3/Discover/main/project_discover_latest
        menuConfig: 
          description: Set of menu entries that are shown for this template
          type: array
          items: 
            $ref: "#/components/schemas/TemplateMenuConfig"
        filters: 
          description: Set of filters entries that apply to this template
          type: array
          items: 
            $ref: "#/components/schemas/TemplateFilterConfig"
        enabled:
          description: Determines if a template is enabled or disabled (No UI implementation for this yet)
          type: boolean
        icon:
          description: Location of the Icon of the Template
          type: string
        marking:
          $ref: "#/components/schemas/TemplateMarkingConfig"
        previewParameters:
          description: TBD
          type: string
      required:
        - name
        - type
    TemplateMenuConfig:
      type: object
      properties:
        id:
          description: Exact name of the Spotfire Tab to Use
          type: string
        label:
          description: Menu Label
          type: string
        icon:
          description: Location of the icon of the menu item (can be icon locator from the UXPL Components (for example; pl-icon-home)
          type: string
        enabled: 
          description: Indicator if this menu item is shown or not
          type: boolean
        isDefault:
          description: Set the page as a default when loading a report
          type: boolean
        child:
          type: array
          items:
            $ref: "#/components/schemas/TemplateMenuConfig"
      required:
        - id
        - label
    TemplateFilterConfig:
      type: object
      properties:
        id:
          description: Exact name of the Spotfire Tab to Use
          type: string
        label:
          description: Menu Label
          type: string
        enabled: 
          description: Indicator if this menu item is shown or not
          type: boolean
        isDefault:
          description: Set the page as a default when loading a report
          type: boolean
      required:
        - id
        - label
    TemplateMarkingConfig:
      type: object
      properties:
        listenOnMarking:
          description: TBD
          type: string
        casesSelector:
          description: TBD
          type: string
        variantSelector:
          description: TBD
          type: string
    Visualisation:
      type: object
      properties:
        Id: 
          description: TBD
          type: string
        Title: 
          description: TBD
          type: string
        Description: 
          description: TBD
          type: string
        CreatedDate: 
          description: TBD
          type: string
        CreatedTimestamp: 
          description: TBD
          type: number
        CreatedByName: 
          description: TBD
          type: string
        ModifiedDate: 
          description: TBD
          type: string
        ModifiedTimestamp: 
          description: TBD
          type: number
        ModifiedByName: 
          description: TBD
          type: string
        IsFolder:
          description: TBD
          type: boolean
        ItemType: 
          description: TBD
          type: string
        Size: 
          description: TBD
          type: number
        Path: 
          description: TBD
          type: string
        ParentId: 
          description: TBD
          type: string
        Permissions: 
          description: TBD
          type: string
        ParentPermissions: 
          description: TBD
          type: string
        HasPreview: 
          description: TBD
          type: boolean
        DisplayPath: 
          description: TBD
          type: string
    NewVisualisationInformation:
      type: object
      properties: 
        sourceId:
          type: string
        destinationFolderId:
          type: string
    DiscoverConfiguration:
      type: object
      properties:
        general:
          $ref: '#/components/schemas/GeneralInformation'
        landingPage:
          $ref: '#/components/schemas/LandingPage'
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        formats:
          type: array
          items:
            $ref: "#/components/schemas/FieldFormats"
        automap:
          type: array
          items:
            $ref: "#/components/schemas/Automapping"
        investigations:
          $ref: '#/components/schemas/Investigations'
        analytics:
          $ref: '#/components/schemas/Analytics'
    GeneralInformation:
      type: object
      properties:
        applicationTitle:
          type: string
        documentationUrl:
          type: string
    LandingPage:
      type: object
      properties:
        title:
          type: string
        subtitle:
          type: string
        backgroundURL:
          type: string
        verticalPadding:
          type: number
        actionButtons:
          type: array
          items:
            $ref: "#/components/schemas/LandingPageButtons"
        highlights:
          type: array
          items:
            $ref: "#/components/schemas/LandingPageHightlight"
    LandingPageButtons:
      type: object
      properties:
        text:
          type: string
        route:
          type: string
    LandingPageHightlight:
      type: object
      properties:
        title:
          type: string
        iconURL:
          type: string
        content:
          type: string
    Message:
      type: object
      properties:
        id:
          type: string
        scope:
          type: string
        message:
          type: string
        persistClose:
          type: boolean
    FieldFormats:
      type: object
      properties:
        fieldName:
          type: string
        values:
          type: array
          items:
            type: string 
    Automapping:
      type: object
      properties:
        fieldName:
          type: string
        values:
          type: array
          items:
            $ref: "#/components/schemas/AutomapingField"
        threshold:
          type: number
    AutomapingField:
      type: object
      properties:
        word:
          type: string
        occurrence:
          type: number
    Investigations:
      type: object
      properties:
        numberApplications:
          type: number
        applications: 
          type: array
          items:
            $ref: '#/components/schemas/InvestigationApplication'
    InvestigationApplication:
      type: object
      properties:
        customTitle:
          type: string
        applicationId:
          type: string
        creatorId:
          type: string
        creatorData:
          type: array
          items:
            $ref: '#/components/schemas/InvestigationField'
        headerFields:
          type: array
          items:
            $ref: '#/components/schemas/InvestigationField'
        detailTitle:
          $ref: '#/components/schemas/InvestigationField'
        showMilestone:
          type: boolean
        allowMultiple:
          type: boolean
        detailFields:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/InvestigationField'
        states:
          type: array
          items:
            $ref: '#/components/schemas/InvestigationState'
    InvestigationField:
      type: object
      properties:
        label:
          type: string
        field:
          type: string
        format:
          type: string
      required:
        - label
        - field
    InvestigationState:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
        icon:
          type: string
    Analytics:
      type: object
      properties:
        previewLocation:
          type: string
        server:
          type: string
        previewTableName:
          type: string
        customUserFolder:
          type: string
    InvestigationDetails:
      type: object
      properties:
        id: 
          type: string
        data:
          description: Case data
        metadata: 
          type: array
          items:
            $ref: "#/components/schemas/InvestigationMetadata"
    InvestigationMetadata:
      type: object
      properties:
        name:
          type: string
        value: 
          type: string
    InvestigationActions:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        formData:
          type: string          
    Application:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
    InvestigationTrigger:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
        fields:
          type: array
          items: 
            $ref: '#/components/schemas/InvestigationTriggerAttributes'
    InvestigationTriggerAttributes:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
    InvestigationApplicationDefinition:
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/InvestigationField'
        creators: 
          type: array
          items: 
            $ref: '#/components/schemas/InvestigationTrigger'
        states:
          type: array
          items:
            $ref: '#/components/schemas/InvestigationState'
    InvestigationCreateRequest:
      type: object
      properties:
        type:
          type: string
        ids:
          type: string
        details:
          type: string
        summary:
          type: string
        analysisId:
          type: string
        analysisName:
          type: string
        templateId:
          type: string
        templateName:
          type: string
    InvestigationCreateResponse:
      type: object
      properties:
        id:
          type: string
    WhoAmI:
      type: object
      properties:
        id:
          type: string
        firstName: 
          type: string
        lastName: 
          type: string
        email:
          type: string
        subscriptionId: 
          type: string
        isUser:
          type: boolean
        isAdmin:
          type: boolean
        isAnalyst:
          type: boolean
        isResolver:
          type: boolean
          
    FolderModel:
      type: object
      properties:
        parentFolderId: 
          type: number
        name:
          type: string
          
    MapFolderCollection: 
      type: object
      properties: 
        items: 
          readOnly: true
          type: array
          items: 
            $ref: '#/components/schemas/MapFolderModel'
        breadcrumbs: 
          readOnly: true
          type: array
          items: 
            type: object
            properties: 
              id: 
                readOnly: true
                type: integer
                format: int32
              name: 
                readOnly: true
                type: string
    MapFolderModel: 
      type: object
      properties: 
        mapFolderId: 
          example: 1
          type: integer
          format: int32
        parentMapFolderId: 
          type: integer
          format: int32
        name: 
          example: EMEA Maps
          type: string
          minLength: 1
          maxLength: 100
        accessRights: 
          type: object
          properties: 
            default: 
              example: allowed
              type: string
              enum: 
              - allowed
              - denied
            specific: 
              type: array
              items: 
                type: object
                properties: 
                  id: 
                    example: 1
                    type: integer
                    format: int32
                  type: 
                    example: user
                    type: string
                    enum: 
                    - user
                    - group
                  access: 
                    example: allowed
                    type: string
                    enum: 
                    - allowed
                    - denied
                  name: 
                    readOnly: true
                    example: John Doe
                    type: string
        maps: 
          readOnly: true
          type: array
          items: 
            type: object
            properties: 
              processId: 
                readOnly: true
                example: 83330BC7232E4465B05BF4AD8756EA13
                type: string
              name: 
                readOnly: true
                example: Sample Map
                type: string
        subFolders: 
          readOnly: true
          type: array
          items: 
            type: object
            properties: 
              mapFolderId: 
                readOnly: true
                example: 1
                type: integer
                format: int32
              name: 
                readOnly: true
                example: EMEA Maps
                type: string
        breadcrumbs: 
          readOnly: true
          type: array
          items: 
            type: object
            properties: 
              mapFolderId: 
                readOnly: true
                example: 1
                type: integer
                format: int32
              name: 
                readOnly: true
                example: EMEA Maps
                type: string
      required: 
        - name
        