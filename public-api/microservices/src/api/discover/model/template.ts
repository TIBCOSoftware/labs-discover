/**
 * TIBCO Discover public API
 * TIBCO Discover public API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { TemplateFilterConfig } from './templateFilterConfig';
import { TemplateMarkingConfig } from './templateMarkingConfig';
import { TemplateMenuConfig } from './templateMenuConfig';

export class Template {
    /**
    * Unique Identifier for a Template
    */
    'id'?: string;
    /**
    * Template name
    */
    'name': string;
    /**
    * The type of template. General and Vertical are provided and can\'t be edited. User defined templates can be modified.
    */
    'type': Template.TypeEnum;
    /**
    * HTML enabled field to describe a template on a card.
    */
    'description'?: string;
    /**
    * Location of an Icon or Image to display on the card.
    */
    'splash'?: string;
    /**
    * Location of the Spotfire Report to use for this template
    */
    'spotfireLocation'?: string;
    /**
    * Set of menu entries that are shown for this template
    */
    'menuConfig'?: Array<TemplateMenuConfig>;
    /**
    * Set of filters entries that apply to this template
    */
    'filters'?: Array<TemplateFilterConfig>;
    /**
    * Determines if a template is enabled or disabled (No UI implementation for this yet)
    */
    'enabled'?: boolean;
    /**
    * Location of the Icon of the Template
    */
    'icon'?: string;
    'marking'?: TemplateMarkingConfig;
    /**
    * TBD
    */
    'previewParameters'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "Template.TypeEnum"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "splash",
            "baseName": "splash",
            "type": "string"
        },
        {
            "name": "spotfireLocation",
            "baseName": "spotfireLocation",
            "type": "string"
        },
        {
            "name": "menuConfig",
            "baseName": "menuConfig",
            "type": "Array<TemplateMenuConfig>"
        },
        {
            "name": "filters",
            "baseName": "filters",
            "type": "Array<TemplateFilterConfig>"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean"
        },
        {
            "name": "icon",
            "baseName": "icon",
            "type": "string"
        },
        {
            "name": "marking",
            "baseName": "marking",
            "type": "TemplateMarkingConfig"
        },
        {
            "name": "previewParameters",
            "baseName": "previewParameters",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Template.attributeTypeMap;
    }
}

export namespace Template {
    export enum TypeEnum {
        General = <any> 'General',
        Vertical = <any> 'Vertical',
        UserDefined = <any> 'User defined'
    }
}
