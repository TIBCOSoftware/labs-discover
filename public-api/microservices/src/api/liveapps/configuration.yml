swagger: '2.0'
info:
  title: Shared Client State Service
  description: |+
    The TIBCO Cloud(TM) Live Apps Shared Client State Service provides a mechanism for storing and publishing UI state information (such as client-specific customization parameters and views of the various managed objects within TIBCO(R) Live Apps -- cases, events, and so on) that can be used across different UI sessions for the same user, and also shared between users.  The actual State content that is passed in the body when a State is created is a JSON string that is opaque to the Shared Client Service. It is up to the client application to define its meaning.

    When a State is created, it can be qualified with the following properties:
      - _name_ is the name of the State (for example, "defaultLanguage").
      - _scope_ is an optional means to further qualify the State. A client may want to scope State so that it applies only to a specific application, a particular customer, and so on.  To facilitate this, the State object contains an optional scope attribute, the value of which could be the ID for the application to which the State applies, or any other value useful to the client for scoping the State.  Then when the client gets the State related to the particular application, it would specify a filter of scope eq 'the application ID'.
      - _sandboxId_ provides another level of scoping. The sandboxId defaults to the production sandbox.

    There are three types of State that may be created and used by client applications:

    - __PRIVATE State__ - This is a State created by the client that is only applicable to the user that creates it.  Only the creating user can read, update, and delete a PRIVATE State (other than automatic cleanup by the service if the user, sandbox or subscription is deleted).  This type of State is used to store user-specific, named configuration for the creating user.  Some examples of PRIVATE State are the default language for a user, the color scheme/theme the user has chosen to use, persisted layout options in the UI (such as splitter locations), or private views.

      Each combination of name/scope/sandboxId must be unique for each user in the subscription.

      If a user is deleted from the subscription, all PRIVATE State for that user is automatically deleted by the service.

    - __PUBLIC State__ - This type of State can be read by all users in the subscription, but can be updated or deleted only by users with OWNER or AUTHOR roles (for more information about roles, see below).

      PUBLIC State is useful for client configuration that is visible to all users, possibly across multiple applications.  There can be at most one instance of any particular name/scope/sandboxId combination of PUBLIC State.  Examples of PUBLIC State are things like Session Monitor configuration or system default language.

      A user must be in the Administrators group to create PUBLIC State.

    - __SHARED State__ - This type of State is shared with other users via the Role [RECIPIENT, AUTHOR, or OWNER] defined on the State (for more information, see "StateRole" below).

       There can be at most one instance of any particular name/scope/sandboxId combination of SHARED State.  Examples of this type of state are things like work views, event views and case views.  An OWNER creates the state that centrally defines the view and then assigns read access to other users via RECIPIENT role, which is a reference to a group in the Organization Model.

       Note that a user may be an OWNER or AUTHOR, but not necessarily a RECIPIENT.  OWNERs and AUTHORs can, of course, read the state in the context of being an OWNER or an AUTHOR.  But if the API is used to get only States in which they are a RECIPIENT, the State is not returned if they are only an AUTHOR/OWNER, but not a RECIPIENT.  This means a user could have access to a view definition, but not necessarily get that view in their list of views when they log into the client.  This is useful for differentiating views for administrative purposes, as opposed to typical end-user views.  The REST API can be used to get State based on Role type.

       All users are allowed to create SHARED State.

    __StateAttribute__
    An Attribute can be assigned to a State to further qualify it. The State Attribute can then be used to filter or sort State when getting or deleting State using the API.

    For example, the client may store State with an Attribute called "viewType".  When storing State for a work view, the client would specify a value of "Work View" for this Attribute, and when storing state for a case view, it would specify a value of "Case View" for this Attribute.  Then if the client wants to get view definitions for just case views, it could get State and specify a filter of attributes/viewType eq 'Case View'.

    State Attributes are not modeled.  They are created by the client in an ad hoc fashion when needed.  The meaning of an Attribute is managed by the client.  Attribute values can only be of string type.

    __StateRole__
    The StateRole is used to control access to PUBLIC and SHARED State, as described below. Users with:

      - RECIPIENT Role can only read the State.
      - AUTHOR Role can read and update the State.
      - OWNER Role can read, update, and delete the State.

    The current User's memberships in the Organization Model determine what roles the user has, and therefore, the access the user has to a given State. The user who creates a State implicitly has a role of OWNER.  A User that is a member of the 'System: ADMINISTRATOR' Group is implicitly assigned an OWNER Role for all PUBLIC and SHARED State.  This is an inherent behavior that cannot be modified.

    There is no concept of Roles for PRIVATE State, as it is inherently owned and completely private to the creating user.

    __StateLink__
    A StateLink is an association that links one State to another.  Attributes can be assigned to a StateLink to qualify the nature of the association.


  termsOfService: ../../contexthelp/common/TIB_bpm-cloud_1.0.0_license.pdf
  contact:
    name: TIBCO Software Inc
    url: http://www.tibco.com
    email: liveapps@tibco.com
  license:
    name: TIBCO Software Inc
    url: http://www.tibco.com
  version: 1.0.0
schemes:
  - https
basePath: /clientstate/v1
consumes:
  - application/json
produces:
  - application/json
  - text/plain
tags:
  - name: States
    description: Methods on States.
  - name: Attributes
    description: Methods on Attributes.
  - name: Roles
    description: Methods on Roles.
  - name: Links
    description: Methods on Links.
paths:
  '/states':
    post:
      summary: Creates a State.
      description: |+
        Creates a new State.  A State can be one of three different types: PRIVATE, PUBLIC or SHARED.  Once a State is created, its type cannot be changed.

        - A PRIVATE State is accessible only to the creating user who inherently has create, read, update, and delete access to the State.  No other user can access this State.  Each user can have their own instance of a particular named State.  When a user is deleted from a subscription, the service will automatically delete all PRIVATE State for that user.

        - A PUBLIC State is inherently readable by all users and can be updated/deleted only by users who have an appropriate AUTHOR or OWNER role defined.

        - A SHARED State is shared with other users via the explicit OWNER/AUTHOR/RECIPIENT roles defined on the State.

        <br>See the StateRole description for details on user access to PUBLIC and SHARED States.

        <br>State names have a uniqueness constraint.  For PRIVATE State, the name must be unique per user, sandboxId, and scope.  For PUBLIC and SHARED State, the name must be unique per type, sandboxId, and scope.  State names are case-sensitive for uniqueness and filtering (see $filter parameter).

        <br>A State can be optionally linked to other States.

        <br>A State can optionally contain attributes that can be used by the client application to classify or give further meaning to the State.  These attributes are not modelled, therefore it is up to the client application to project the appropriate meaning.  Attribute names can be any combination of: letters, numbers, and the following four special characters: - (dash), _ (underscore), . (dot), $ (dollar).  Attribute names are case-sensitive for uniqueness and filtering.  Attributes can be used to filter States (see $filter parameter).

        <br>A user must be in the Administrators group in order to create a PUBLIC State.  All users can create PRIVATE and SHARED State.

      parameters:
        - $ref: '#/parameters/addState'
      tags:
        - States
      operationId: createState
      responses:
        '200':
          description: OK - A new State created successfully.
          schema:
            description: The identifier for the created State.
            type: string
        '400':
          description: 'Bad Request - The request payload is badly formed or a resource matching the given State already exists.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - Unrecognized URL.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Updates States.
      description: Updates the States.  Either all States are updated, or none are updated if an error occurs.  For rules about which users can update a State, see the description for POST /states.
      parameters:
        - $ref: '#/parameters/states'
      tags:
        - States
      operationId: updateStates
      responses:
        '200':
          description: OK - The States that have been updated.
          schema:
            title: states
            type: array
            items:
              $ref: '#/definitions/State'
        '400':
          description: 'Bad Request - The request payload is badly formed.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - At least one of the States does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Gets States.
      description: Returns States determined by the supplied query parameters.  By default, all PRIVATE and PUBLIC States are returned, along with SHARED States for which the user has a RECIPIENT role.  The $filter parameter can be used to further qualify which States are returned.  SHARED States are accessible only if the user has a role as OWNER, AUTHOR or RECIPIENT.
      parameters:
        - $ref: '#/parameters/skip'
        - $ref: '#/parameters/top'
        - $ref: '#/parameters/filter'
        - $ref: '#/parameters/orderby'
        - $ref: '#/parameters/searchState'
        - $ref: '#/parameters/selectState'
        - $ref: '#/parameters/count'
      tags:
        - States
      operationId: getStates
      responses:
        '200':
          description: OK - The States determined by the supplied query parameters.
          schema:
            title: states
            type: array
            items:
              $ref: '#/definitions/State'
        '400':
          description: 'Bad Request - Invalid query parameter.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - Unrecognized URL.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

    delete:
      summary: Deletes States.
      description: Deletes States determined by the $filter query parameter, which is required.  For rules about which users can delete a State, see the description for StateRole and POST /states.
      parameters:
        - $ref: '#/parameters/filter'
      tags:
        - States
      operationId: deleteStates
      responses:
        '200':
          description: OK - No contents returned - States deleted successfully.
        '400':
          description: 'Bad Request - No filter is provided or invalid query parameter.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - Unrecognized URL.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/states/{id}':
    put:
      summary: Updates State.
      description: Updates the State matching the given id.  Any attributes, roles and links that exist at the time of update are replaced with the contents of the update.
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/updateState'
      tags:
        - States
      operationId: updateState
      responses:
        '200':
          description: OK - The State that has been updated.
          schema:
              $ref: '#/definitions/State'
        '400':
          description: 'Bad Request - The ID value is not a valid number or the request payload is badly formed.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Gets a State.
      description: Returns the State matching the given id.
      parameters:
        - $ref: '#/parameters/id'
      tags:
        - States
      operationId: getState
      responses:
        '200':
          description: OK - The State matching the given id.
          schema:
            $ref: '#/definitions/State'
        '400':
          description: 'Bad Request - The ID value is not a valid number.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Deletes a State.
      description: Deletes the State matching the given id.
      parameters:
        - $ref: '#/parameters/id'
      tags:
        - States
      operationId: deleteState
      responses:
        '200':
          description: OK - No contents returned - State deleted successfully.
        '400':
          description: 'Bad Request - The ID value is not a valid number.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/states/{id}/attributes':
    post:
      summary: Creates a StateAttribute.
      description: Creates a new StateAttribute for a State.
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/addAttribute'
      tags:
        - Attributes
      operationId: createAttribute
      responses:
        '200':
          description: OK - A new StateAttribute created successfully.
          schema:
            description: The identifier for the created StateAttribute.
            type: string
        '400':
          description: 'Bad Request - The ID value is not a valid number, the request payload is badly formed, or a resource matching the given StateAttribute already exists.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Updates StateAttributes.
      description: Updates the StateAttributes for a State.  All StateAttributes will be updated or none if an error occurs.
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/attributes'
      tags:
        - Attributes
      operationId: updateAttributes
      responses:
        '200':
          description: OK - The StateAttributes that have been updated.
          schema:
            title: attributes
            type: array
            items:
              $ref: '#/definitions/StateAttribute'
        '400':
          description: 'Bad Request - The ID value is not a valid number or the request payload is badly formed.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist or at least one of the StateAttributes does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Gets StateAttributes.
      description: Returns StateAttributes from the State matching the id.
      parameters:
        - $ref: '#/parameters/id'
      tags:
        - Attributes
      operationId: getAttributes
      responses:
        '200':
          description: OK - The StateAttributes determined by the supplied query parameters.
          schema:
            title: attributes
            type: array
            items:
              $ref: '#/definitions/StateAttribute'
        '400':
          description: 'Bad Request - The ID value is not a valid number.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/stateAttributes/{id}':
    put:
      summary: Updates StateAttribute.
      description: Updates the StateAttribute matching the given id.
      parameters:
        - $ref: '#/parameters/attributeId'
        - $ref: '#/parameters/updateAttribute'
      tags:
        - Attributes
      operationId: updateAttribute
      responses:
        '200':
          description: OK - The StateAttribute that has been updated.
          schema:
            $ref: '#/definitions/StateAttribute'
        '400':
          description: 'Bad Request - The given ID value is not a valid number or the request payload is badly formed.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A StateAttribute matching the given ID value does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Gets StateAttribute.
      description: Returns the StateAttribute matching the given id.
      parameters:
        - $ref: '#/parameters/attributeId'
      tags:
        - Attributes
      operationId: getAttribute
      responses:
        '200':
          description: OK - The StateAttribute matching the given id.
          schema:
            $ref: '#/definitions/StateAttribute'
        '400':
          description: 'Bad Request - The given ID value is not a valid number.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A StateAttribute matching the given ID value does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Deletes a StateAttribute.
      description: Deletes the StateAttribute matching the given id.
      parameters:
        - $ref: '#/parameters/attributeId'
      tags:
        - Attributes
      operationId: deleteAttribute
      responses:
        '200':
          description: OK - No contents returned - StateAttribute deleted successfully.
        '400':
          description: 'Bad Request - The given ID value is not a valid number.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A StateAttribute matching the given ID value does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/states/{id}/roles':
    post:
      summary: Creates a StateRole.
      description: Creates a new StateRole for a State.
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/addRole'
      tags:
        - Roles
      operationId: createRole
      responses:
        '200':
          description: OK - A new StateRole created successfully.
          schema:
            description: The identifier for the created StateRole.
            type: string
        '400':
          description: 'Bad Request - The ID value is not a valid number, the request payload is badly formed, or a resource matching the given StateRole already exists.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Updates StateRoles.
      description: Updates the StateRoles for a State.  Either all StateRoles are updated, or none are updated if an error occurs.
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/roles'
      tags:
        - Roles
      operationId: updateRoles
      responses:
        '200':
          description: OK - The StateRoles that have been updated.
          schema:
            title: roles
            type: array
            items:
              $ref: '#/definitions/StateRole'
        '400':
          description: 'Bad Request - The ID value is not a valid number or the request payload is badly formed.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist or at least one of the StateRoles does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Gets StateRoles.
      description: Returns StateRoles from the State matching the id.
      parameters:
        - $ref: '#/parameters/id'
      tags:
        - Roles
      operationId: getRoles
      responses:
        '200':
          description: OK - The StateRoles determined by the supplied query parameters.
          schema:
            title: roles
            type: array
            items:
              $ref: '#/definitions/StateRole'
        '400':
          description: 'Bad Request - The ID value is not a valid number.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/stateRoles/{id}':
    put:
      summary: Updates a StateRole.
      description: Updates the StateRole matching the given id.
      parameters:
        - $ref: '#/parameters/roleId'
        - $ref: '#/parameters/updateRole'
      tags:
        - Roles
      operationId: updateRole
      responses:
        '200':
          description: OK - The StateRole that has been updated.
          schema:
            $ref: '#/definitions/StateRole'
        '400':
          description: 'Bad Request - The given ID value is not a valid number or the request payload is badly formed.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A StateRole matching the given ID value does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Gets a StateRole.
      description: Returns the StateRole matching the given id.
      parameters:
        - $ref: '#/parameters/roleId'
      tags:
        - Roles
      operationId: getRole
      responses:
        '200':
          description: OK - The StateRole matching the given id.
          schema:
            $ref: '#/definitions/StateRole'
        '400':
          description: 'Bad Request - The given ID value is not a valid number.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A StateRole matching the given ID value does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Deletes a StateRole.
      description: Deletes the StateRole matching the given id.
      parameters:
        - $ref: '#/parameters/roleId'
      tags:
        - Roles
      operationId: deleteRole
      responses:
        '200':
          description: OK - No contents returned - StateRole deleted successfully.
        '400':
          description: 'Bad Request - The given ID value is not a valid number.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A StateRole matching the given ID value does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/states/{id}/links':
    post:
      summary: Creates a StateLink.
      description: Creates a new StateLink.  A State can be linked to any other States.
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/addLink'
      tags:
        - Links
      operationId: createLink
      responses:
        '200':
          description: OK - A new StateLink created successfully.
          schema:
            description: The identifier for the created StateLink.
            type: string
        '400':
          description: 'Bad Request - The ID value is not a valid number, the request payload is badly formed, or a resource matching the given StateLink already exists.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Updates StateLinks.
      description: Updates the StateLinks.  Either all StateLinks are updated, or none are updated if an error occurs.
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/links'
      tags:
        - Links
      operationId: updateLinks
      responses:
        '200':
          description: OK - The StateLinks that have been updated.
          schema:
            title: links
            type: array
            items:
              $ref: '#/definitions/StateLink'
        '400':
          description: 'Bad Request - The ID value is not a valid number or the request payload is badly formed.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist or at least one of the StateLinks does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Gets StateLinks.
      description: Returns StateLinks from the State matching the id.
      parameters:
        - $ref: '#/parameters/id'
      tags:
        - Links
      operationId: getLinks
      responses:
        '200':
          description: OK - The StateLinks determined by the supplied query parameters.
          schema:
            title: links
            type: array
            items:
              $ref: '#/definitions/StateLink'
        '400':
          description: 'Bad Request - The ID value is not a valid number.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/stateLinks/{id}':
    put:
      summary: Updates a StateLink.
      description: Updates the StateLink matching the given id.
      parameters:
        - $ref: '#/parameters/linkId'
        - $ref: '#/parameters/updateLink'
      tags:
        - Links
      operationId: updateLink
      responses:
        '200':
          description: OK - The StateLink that has been updated.
          schema:
            $ref: '#/definitions/StateLink'
        '400':
          description: 'Bad Request - The given ID value is not a valid number or the request payload is badly formed.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A StateLink matching the given ID value does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Gets a StateLink.
      description: Returns the StateLink matching the given id.
      parameters:
        - $ref: '#/parameters/linkId'
      tags:
        - Links
      operationId: getLink
      responses:
        '200':
          description: OK - The StateLink matching the given id.
          schema:
            $ref: '#/definitions/StateLink'
        '400':
          description: 'Bad Request - The given ID value is not a valid number.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A StateLink matching the given ID value does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Deletes a StateLink.
      description: Deletes the StateLink matching the given id.
      parameters:
        - $ref: '#/parameters/linkId'
      tags:
        - Links
      operationId: deleteLink
      responses:
        '200':
          description: OK - No contents returned - StateLink deleted successfully.
        '400':
          description: 'Bad Request - The given ID value is not a valid number.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A StateLink matching the given ID value does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/states/{id}/linkedFromStates':
    get:
      summary: Gets linked-from States.
      description: Returns States that are linked from the State matching the id and determined by the supplied query parameters.
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/skip'
        - $ref: '#/parameters/top'
        - $ref: '#/parameters/filter'
        - $ref: '#/parameters/orderby'
        - $ref: '#/parameters/searchState'
        - $ref: '#/parameters/selectState'
        - $ref: '#/parameters/count'
      tags:
        - States
      operationId: getLinkedFromStates
      responses:
        '200':
          description: OK - The linked States determined by the supplied query parameters.
          schema:
            title: states
            type: array
            items:
              $ref: '#/definitions/State'
        '400':
          description: 'Bad Request - The ID value is not a valid number or invalid query parameter.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  '/states/{id}/linkedToStates':
    get:
      summary: Gets linked-to States.
      description: Returns States that have a link to the State matching the id and determined by the supplied query parameters.
      parameters:
        - $ref: '#/parameters/id'
        - $ref: '#/parameters/skip'
        - $ref: '#/parameters/top'
        - $ref: '#/parameters/filter'
        - $ref: '#/parameters/orderby'
        - $ref: '#/parameters/searchState'
        - $ref: '#/parameters/selectState'
        - $ref: '#/parameters/count'
      tags:
        - States
      operationId: getLinkedToStates
      responses:
        '200':
          description: OK - The linked States determined by the supplied query parameters.
          schema:
            title: states
            type: array
            items:
              $ref: '#/definitions/State'
        '400':
          description: 'Bad Request - The ID value is not a valid number or invalid query parameter.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          $ref: '#/responses/forbidden'
        '404':
          description: Not Found - A State matching the given id does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
parameters:
  id:
    name: id
    in: path
    description: The identifier for a State.
    required: true
    type: string
  addState:
    name: state
    in: body
    description: The State to be added.
    required: true
    schema:
      $ref: '#/definitions/State'
  updateState:
    name: state
    in: body
    description: The State to be updated.
    required: true
    schema:
      $ref: '#/definitions/State'
  states:
    name: states
    in: body
    description: The States to be updated (containing at least one).
    required: true
    schema:
      title: states
      type: array
      items:
        $ref: '#/definitions/State'
  attributeId:
    name: id
    in: path
    description: The identifier for a StateAttribute.
    required: true
    type: string
  addAttribute:
    name: attribute
    in: body
    description: The StateAttribute to be added.
    required: true
    schema:
      $ref: '#/definitions/StateAttribute'
  updateAttribute:
    name: attribute
    in: body
    description: The StateAttribute to be updated.
    required: true
    schema:
      $ref: '#/definitions/StateAttribute'
  attributes:
    name: attributes
    in: body
    description: The attributes to be updated (containing at least one).
    required: true
    schema:
      title: attributes
      type: array
      items:
        $ref: '#/definitions/StateAttribute'
  roleId:
    name: id
    in: path
    description: The identifier for a StateRole.
    required: true
    type: string
  addRole:
    name: role
    in: body
    description: The StateRole to be added.
    required: true
    schema:
      $ref: '#/definitions/StateRole'
  updateRole:
    name: role
    in: body
    description: The StateRole to be updated.
    required: true
    schema:
      $ref: '#/definitions/StateRole'
  roles:
    name: roles
    in: body
    description: The roles to be updated (containing at least one).
    required: true
    schema:
      title: roles
      type: array
      items:
        $ref: '#/definitions/StateRole'
  linkId:
    name: id
    in: path
    description: The identifier for a StateLink.
    required: true
    type: string
  addLink:
    name: link
    in: body
    description: The StateLink to be added.
    required: true
    schema:
      $ref: '#/definitions/StateLink'
  updateLink:
    name: link
    in: body
    description: The StateLink to be updated.
    required: true
    schema:
      $ref: '#/definitions/StateLink'
  links:
    name: links
    in: body
    description: The links to be updated (containing at least one).
    required: true
    schema:
      title: links
      type: array
      items:
        $ref: '#/definitions/StateLink'
  skip:
    name: $skip
    in: query
    description: |+
      Skips the specified number of items from the beginning of the list that would normally be returned.  These skipped items are not included in the result.
      - For example, '$skip=80' will not return the first 80 items that would otherwise be returned from the REST call.  Subsequent items are returned, starting with the 81st item in the list.

      The value must be 0 or greater.  An empty string is ignored.
      <br>Note that the GET request is stateless from one request to another and so the underlying set of items in the list effected by $skip can change from one call to the next.
    required: false
    type: string
  top:
    name: $top
    in: query
    description: |+
      Returns only this number of items from the start of the list that would be returned (subject to any use of $skip).
      - For example, '$top=20' results in only the first 20 items from the list being returned.

      The value must be 1 or greater and less than or equal to a maximum value of 500.  If not specified (or set to an empty string), a default value of 50 is used.  The maximum and default values do not apply when $count is set to true.
      <br>Note that the GET request is stateless from one request to another and so the underlying set of items in the list effected by $top can change from one call to the next.
    required: false
    type: string
  filter:
    name: $filter
    in: query
    description: |+
      The filter query option is used to define specific queries, based on inherent State properties (id, name, description, type, sandboxId, scope, createdDate, createdByName, createdById, modifiedDate, modifiedByName, modifiedById, isOrphaned, isAbandoned), roles assigned (roleEntityId, roleType), or any attributes defined for the State, that will return the required set of items.

      Attribute names on the State are qualified in the filter expression with the 'attributes/' prefix, that is, attributes/attrName eq 'value'.  Both State name and Attribute name are case-sensitive (a filter with name eq 'Case Example' or attributes/attrName eq 'Case Example' matches 'Case Example', but not 'case example').

      If the filter does not explicitly contain a filter clause for roleType, by default, only State items for the RECIPIENT roleType are returned.  If the filter does not explicitly contain a filter clause for type, by default, States of all types are returned.

      For more information, see the _Filtering and Sorting_ Key Concepts page.
    required: false
    type: string
  orderby:
    name: $orderby
    in: query
    description: |+
      This query option is used to request items in either ascending order using __asc__ or descending order using __desc__, based on one of the resource properties (id, name, description, type, sandboxId, scope, createdDate, createdByName, createdById, modifiedDate, modifiedByName, modifiedById, isOrphaned, isAbandoned).  If neither __asc__ nor __desc__ is specified, ascending order is used.

      For example, if '$orderby=name desc' is used, assuming that name is a string, the returned items are sorted in reverse alphabetical order according to the name property.

      To sort on multiple properties, use a comma-separated list, for example, '$orderby=type asc, name desc' first sorts against type, and then for each type, sorts that set of returned items according to the reverse alphabetical order of the name property.

      The default order is by name ASC. For more information, see the _Filtering and Sorting_ Key Concepts page.
    required: false
    type: string
  searchState:
    name: $search
    in: query
    description: The $search query restricts the result to include only those States matching the specified search expression.  This performs a textual search on the JSON string of the StateContent.  For example, '$search=Scottsdale' returns States where the sub-string 'Scottsdale' is located somewhere within the JSON string of the State content property.
    required: false
    type: string
  selectState:
    name: $select
    in: query
    description: |+
      This query option is used to specify the specific property values from the State to be returned.  Other property values not included in the $select list are returned as null.

      The property names are specified as a comma-separated string that can contain any of ["name", "content", "type", "description", "attributes", "roles", "links", "id", "sandboxId", "scope", "createdById", "createdByName", "createdDate", "modifiedById", "modifiedByName", "modifiedDate", "isOrphaned", "isAbandoned"].  For example, '$select=content,type,id' results in only the content, type and id property values being returned.
    required: false
    type: string
  count:
    name: $count
    in: query
    description: Return a simple number only, this being the count of the items that would be returned from the request if the count query option was not present.  Note that the assigned value for $count is true, that is, the correct use of the count query option is '$count=true'.  If '$count=false' is used, this has no effect.  It is recognized that $count is an expensive operation and should not be used by clients without consideration.
    required: false
    type: string
responses:
  forbidden:
    description: Forbidden - The user does not have access to the request resource(s) or is not authenticated.
    schema:
      $ref: '#/definitions/Error'
definitions:
  State:
    description: UI state information (such as client-specific customization parameters, and views of the various managed objects within Live Apps - cases, events, and so on).
    type: object
    required:
      - name
      - content
    properties:
      name:
        type: string
        description: The name of this State.  State names have a uniqueness constraint.  For PRIVATE State, the name must be unique per user, sandboxId, and scope.  For PUBLIC and SHARED State, the name must be unique per type, sandboxId, and scope.  The State name is case-sensitive for uniqueness and filtering (see $filter parameter).
      content:
        $ref: '#/definitions/StateContent'
      type:
        type: string
        description: An optional State type. Default=PRIVATE.  A PRIVATE State is accessible only by the user who created it, who implicitly has the role of OWNER.  A SHARED State is accessible based on roles.  A PUBLIC State can be read by all users (all users implicitly have a role of RECIPIENT), while OWNER and AUTHOR roles still apply for changing the State.
        enum:
          - PRIVATE
          - SHARED
          - PUBLIC
      description:
        type: string
        description: An optional description of this State.
      sandboxId:
        type: string
        description: An optional unique sandbox identifier, default=[the PRODUCTION sandbox ID of the user creating this State].
      scope:
        type: string
        description: An optional value used to qualify a context for this State. Defaults to a zero-length string.
      attributes:
        type: array
        description: An optional set of named attributes that may be relevant to this State.
        items:
          $ref: '#/definitions/StateAttribute'
      roles:
        type: array
        description: An optional set of StateRole assignments.
        items:
          $ref: '#/definitions/StateRole'
      links:
        type: array
        description: An optional set of links to other States.
        items:
          $ref: '#/definitions/StateLink'
      id:
        type: string
        description: Set by the service.  The unique identifier for this State, assigned by the service when created.
        readOnly: false
      createdById:
        type: string
        description: Set by the service.  The unique identifier for the User who created this State.  This value is set by the service when a State is created.  The User who creates a State implicitly has a role of OWNER.  If this User is later deleted from the Subscription, the service automatically deletes any PRIVATE State created by the deleted User and ensures that all PUBLIC and SHARED State created by the deleted User has an OWNER role.  If an OWNER role does not exist, a StateRole is automatically added, giving the inherent Administrators group an OWNER role.
        readOnly: false
      createdByName:
        type: string
        description: Set by the service.  The display name of the User who created this State.  This value is set by the service when a State is created and is used for display purposes only.  If the User has been deleted then this value is set to 'Unknown User'.
        readOnly: false
      createdDate:
        description: Set by the service.  The date-time (UTC) when this State was created.  This property is maintained by the service.
        readOnly: false
        type: string
        format: date-time
      modifiedById:
        type: string
        description: Set by the service.  The unique identifier for the User who last modified this State.  This value is set by the service when a State is modified.
        readOnly: false
      modifiedByName:
        type: string
        description: Set by the service.  The display name of the User who last modified this State.  This value is set by the service when a State is modified and is used for display purposes only.  If the User has been deleted then this value is set to 'Unknown User'.
        readOnly: false
      modifiedDate:
        description: Set by the service.  The date-time (UTC) when this State was last modified.  This property is maintained by the service.
        readOnly: false
        type: string
        format: date-time
      isOrphaned:
        description: Set by the service.  This is set true for SHARED or PUBLIC State if the user who created the State is deleted.
        readOnly: false
        type: boolean
      isAbandoned:
        description: |+
          Set by the service.  This is set true for SHARED or PUBLIC State if no OWNER exists as a result of either of these conditions:

          - The user who created the State is deleted, and no other OWNER Role exists.
          - A group, which is the only OWNER Role, is deleted, and the State isOrphaned flag is set.

          <br>In either case, the inherent System ADMINISTRATOR group is assigned an OWNER Role to ensure that OWNER Role access to the State exists.
          <br>This flag is cleared if an OWNER Role is subsequently assigned.
        readOnly: false
        type: boolean

  StateContent:
    description: A generic JSON object containing UI state information.  The content of the JSON is opaque to this service, which knows nothing about the schema.
    type: object
    required:
      - json
    properties:
      json:
        description: A JSON string.
        type: string
  StateAttribute:
    description: A name/value pair relevant to a State.
    type: object
    required:
      - name
      - value
    properties:
      name:
        description: |+
          The State attribute name. Attribute names can be any combination of: letters, numbers, and the following four special characters: - (dash), _ (underscore), . (dot), $ (dollar).  The State attribute name is case-sensitive for uniqueness and filtering (see $filter parameter).
        type: string
      value:
        description: The State attribute value.
        type: string
      id:
        type: string
        description: Set by the service.  The unique identifier for this StateAttribute, assigned by the service when created.
        readOnly: false
      stateId:
        type: string
        description: Set by the service.  The unique identifier for the State that this StateAttribute is assigned to.
        readOnly: false
  LinkAttribute:
    description: A name/value pair relevant to a StateLink.
    type: object
    required:
      - name
      - value
    properties:
      name:
        description: The Link attribute name.
        type: string
      value:
        description: The Link attribute value.
        type: string
      id:
        type: string
        description: Set by the service.  The unique identifier for this LinkAttribute, assigned by the service when created.
        readOnly: false
      linkedId:
        type: string
        description: The linkedStateId value of the StateLink to which this LinkAttribute is assigned.
        readOnly: false
      stateId:
        type: string
        description: The stateId value of the StateLink to which this LinkAttribute is assigned.
        readOnly: false
  StateRole:
    type: object
    description: |+
      Assigns an access role to an Organization Model Entity, which provides shared access to a non-private State (a State of SHARED or PUBLIC).

      Each StateRole matches a role (OWNER, AUTHOR, or RECIPIENT) to an Organization Model Entity (group).  The current User's memberships in the Organization Model then determines what role the user has to access a given State.  The user who creates a State implicitly has a role of OWNER.

      Roles do not apply when the State type is set to PRIVATE, since in that case, the State is accessible only by the user who created it.

      If a State or an Organization Model Entity is deleted, any associated StateRole is also deleted automatically.
    required:
      - entityId
      - role
    properties:
      entityId:
        type: string
        description: The unique identifier for an Organization Model Entity.
      role:
        type: string
        description: |+
          Role controlling access to States.  One of ["OWNER", "AUTHOR", "RECIPIENT"].
          - An OWNER can create/delete/read/update State, and add or remove OWNER, AUTHOR, and RECIPIENT roles.
          - An AUTHOR can read/update State, and add or remove AUTHOR and RECIPIENT roles.
          - A RECIPIENT can only read State.
        enum:
          - OWNER
          - AUTHOR
          - RECIPIENT
      id:
        type: string
        description: Set by the service.  The unique identifier for this StateRole, assigned by the service when created.
        readOnly: false
      stateId:
        type: string
        description: The unique identifier for the State to which this StateRole is assigned.
        readOnly: false
      entityName:
        type: string
        description: Set by the service.  The display name of the Organization Model Entity specified by entityId.  This value is set by the service when a StateRole is created and is used for display purposes only.
        readOnly: false
      entityType:
        type: string
        description: Set by the service.  The type of Organization Model Entity specified by entityId.  This value is set by the service when a StateRole is created and cannot be modified.
        readOnly: false
        enum:
          - AllUsers
          - Administrator
          - ApplicationDeveloper
          - UiDeveloper
          - SubscriptionDefined
  StateLink:
    type: object
    description: Provides a link between States.
    required:
      - linkedStateId
    properties:
      linkedStateId:
        type: string
        description: The identifier for the State being linked to.
      attributes:
        type: array
        description: An optional set of named attributes that may be relevant to this Link.
        items:
          $ref: '#/definitions/LinkAttribute'
      id:
        type: string
        description: Set by the service.  The unique identifier for this StateLink, assigned by the service when created.
        readOnly: false
      stateId:
        type: string
        description: The unique identifier for the State to which this StateLink is assigned.
        readOnly: false
  Error:
    title: Error Response
    description: The JSON payload to be returned when either a 400 or 500 HTTP status code is returned.
    type: object
    properties:
      errorMsg:
        description: Verbose error message.
        readOnly: true
        type: string
      errorCode:
        description: |
          The following are the possible error codes in the Shared Client State Service (note that the description shown is not part of the error code):
          - SS_DB_READ_ERROR - Error while reading an entity.
          - SS_DB_WRITE_ERROR - Error while writing an entity.
          - SS_DB_DELETE_ERROR - Error while deleting an entity.
          - SS_DB_NULL_ENTITY - Attempt to write a null entity.
          - SS_DB_NO_SUBSCRIPTION - No Subscription can be identified from security context.
          - SS_DB_MANDATORY_PROPERTY_MISSING - A mandatory property has not been supplied in the request.
          - SS_DB_NOT_AUTHENTICATED - No authenticated caller can be identified from the security context.
          - SS_DB_CONSTRAINT_ERROR - A constraint error occurred while writing an entity.
          - SS_SRVC_UNKNOWN_ENTITY - Unable to locate the identified entity.
          - SS_SRVC_NOT_AUTHENTICATED - Unable to identify the caller.
          - SS_SRVC_SERVICE_NOT_AUTHORIZED - The caller is not authorized to access the identified service.
          - SS_SRVC_ENTITY_NOT_AUTHORIZED - The caller is not authorized to access the identified entity.
          - SS_SRVC_SANDBOX_NOT_AUTHORIZED - The caller is not authorized to access the identified sandbox.
          - SS_SRVC_NOT_REGISTERED - The caller is not a registered Shared Client State Service user.
          - SS_SRVC_MISSING_MANDATORY_PARAMETER - A mandatory parameter has not been supplied in the request.
          - SS_SRVC_INVALID_PARAMETER - A parameter supplied in the request is invalid.
        readOnly: true
        type: string
      stackTrace:
        description: Added if available and requested by X-Provide-Stacktrace HTTP header.
        readOnly: true
        type: string
      contextAttributes:
        description: A set of named attributes that may be relevant to the error in order to determine the cause of the error.
        readOnly: true
        type: array
        items:
          $ref: '#/definitions/ErrorContextAttribute'
  ErrorContextAttribute:
    description: A name/value pair relevant to an error.
    type: object
    properties:
      name:
        description: The attribute name.
        readOnly: true
        type: string
      value:
        description: The attribute value.
        readOnly: true
        type: string
