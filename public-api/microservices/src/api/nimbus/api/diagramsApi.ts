/**
 * TIBCO Nimbus Public REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { DiagramCollection } from '../model/diagramCollection';
import { DiagramModel } from '../model/diagramModel';
import { ExceptionSchema } from '../model/exceptionSchema';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://nimbus.tenant-integration.tcie.pro/01FJBTV4SKXGQVB9ENR654CSFX/ctrlwebisapi.dll';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DiagramsApiApiKeys {
    ApiKeyAuth,
}

export class DiagramsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'ApiKeyAuth': new ApiKeyAuth('header', 'Authorization'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: DiagramsApiApiKeys, value: string) {
        (this.authentications as any)[DiagramsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Create a new child diagram by specifying the parent diagram and object. For this operation to be successful the parent must be an unlocked draft that the user has permission to update.
     * @summary Create a new child diagram.
     * @param mapAndDiagramId A string parameter that contains a map id and a diagram id separated by a period. eg : 0:9CB21226514442E0967F1250FA1EDFCB.C750D64DB9FC4174B42EEE7C8A93E9D2
     * @param parentObjectId A UUID string value that identifies the parent object for a child diagram. This is normally an activity but can also be an image or textbox.
     * @param layout Direction to use when automatically positioning diagram objects.
     * @param itemsPerLine Maximum number of objects to include per line. If this value is set to zero then all objects will appear in one continuous row or column.
     * @param objectWidth Width to use for activities and text boxes
     * @param objectHeight Height to use for activities and text boxes
     * @param horzGap Width of the gap to place between activities.
     * @param vertGap Height of the gap to place between activities.
     * @param diagramModel 
     */
    public async createDiagram (mapAndDiagramId: string, parentObjectId: string, layout?: 'None' | 'Rows' | 'Columns', itemsPerLine?: number, objectWidth?: number, objectHeight?: number, horzGap?: number, vertGap?: number, diagramModel?: DiagramModel, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DiagramModel;  }> {
        const localVarPath = this.basePath + '/api/v1/diagrams/{mapAndDiagramId}/parent/{parentObjectId}'
            .replace('{' + 'mapAndDiagramId' + '}', encodeURIComponent(String(mapAndDiagramId)))
            .replace('{' + 'parentObjectId' + '}', encodeURIComponent(String(parentObjectId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'mapAndDiagramId' is not null or undefined
        if (mapAndDiagramId === null || mapAndDiagramId === undefined) {
            throw new Error('Required parameter mapAndDiagramId was null or undefined when calling createDiagram.');
        }

        // verify required parameter 'parentObjectId' is not null or undefined
        if (parentObjectId === null || parentObjectId === undefined) {
            throw new Error('Required parameter parentObjectId was null or undefined when calling createDiagram.');
        }

        if (layout !== undefined) {
            localVarQueryParameters['layout'] = ObjectSerializer.serialize(layout, "'None' | 'Rows' | 'Columns'");
        }

        if (itemsPerLine !== undefined) {
            localVarQueryParameters['itemsPerLine'] = ObjectSerializer.serialize(itemsPerLine, "number");
        }

        if (objectWidth !== undefined) {
            localVarQueryParameters['objectWidth'] = ObjectSerializer.serialize(objectWidth, "number");
        }

        if (objectHeight !== undefined) {
            localVarQueryParameters['objectHeight'] = ObjectSerializer.serialize(objectHeight, "number");
        }

        if (horzGap !== undefined) {
            localVarQueryParameters['horzGap'] = ObjectSerializer.serialize(horzGap, "number");
        }

        if (vertGap !== undefined) {
            localVarQueryParameters['vertGap'] = ObjectSerializer.serialize(vertGap, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(diagramModel, "DiagramModel")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.ApiKeyAuth.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DiagramModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "DiagramModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Create a new child diagram by specifying the parent diagram and activity. For this operation to be successful the parent must be an unlocked draft that the user has permission to update.
     * @summary Create a new child diagram.
     * @param mapAndDiagramId A string parameter that contains a map id and a diagram id separated by a period. eg : 0:9CB21226514442E0967F1250FA1EDFCB.C750D64DB9FC4174B42EEE7C8A93E9D2
     * @param parentActivityId An integer value that identifies the activity that will drill-down to the new diagram.
     * @param layout Direction to use when automatically positioning diagram objects.
     * @param itemsPerLine Maximum number of objects to include per line. If this value is set to zero then all objects will appear in one continuous row or column.
     * @param objectWidth Width to use for activities and text boxes
     * @param objectHeight Height to use for activities and text boxes
     * @param horzGap Width of the gap to place between activities.
     * @param vertGap Height of the gap to place between activities.
     * @param diagramModel 
     */
    public async createDiagram2 (mapAndDiagramId: string, parentActivityId: number, layout?: 'None' | 'Rows' | 'Columns', itemsPerLine?: number, objectWidth?: number, objectHeight?: number, horzGap?: number, vertGap?: number, diagramModel?: DiagramModel, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DiagramModel;  }> {
        const localVarPath = this.basePath + '/api/v1/diagrams/{mapAndDiagramId}/parent-activity/{parentActivityId}'
            .replace('{' + 'mapAndDiagramId' + '}', encodeURIComponent(String(mapAndDiagramId)))
            .replace('{' + 'parentActivityId' + '}', encodeURIComponent(String(parentActivityId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'mapAndDiagramId' is not null or undefined
        if (mapAndDiagramId === null || mapAndDiagramId === undefined) {
            throw new Error('Required parameter mapAndDiagramId was null or undefined when calling createDiagram2.');
        }

        // verify required parameter 'parentActivityId' is not null or undefined
        if (parentActivityId === null || parentActivityId === undefined) {
            throw new Error('Required parameter parentActivityId was null or undefined when calling createDiagram2.');
        }

        if (layout !== undefined) {
            localVarQueryParameters['layout'] = ObjectSerializer.serialize(layout, "'None' | 'Rows' | 'Columns'");
        }

        if (itemsPerLine !== undefined) {
            localVarQueryParameters['itemsPerLine'] = ObjectSerializer.serialize(itemsPerLine, "number");
        }

        if (objectWidth !== undefined) {
            localVarQueryParameters['objectWidth'] = ObjectSerializer.serialize(objectWidth, "number");
        }

        if (objectHeight !== undefined) {
            localVarQueryParameters['objectHeight'] = ObjectSerializer.serialize(objectHeight, "number");
        }

        if (horzGap !== undefined) {
            localVarQueryParameters['horzGap'] = ObjectSerializer.serialize(horzGap, "number");
        }

        if (vertGap !== undefined) {
            localVarQueryParameters['vertGap'] = ObjectSerializer.serialize(vertGap, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(diagramModel, "DiagramModel")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.ApiKeyAuth.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DiagramModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "DiagramModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Delete an existing diagram. The diagram must be an unlocked draft that the user has write access to. The delete diagram will be stored in the deletion recovery manager for a period of time before being finally purged. It is not possible to delete the level 1 diagram.
     * @summary Delete an existing diagram.
     * @param mapAndDiagramId A string parameter that contains a map id and a diagram id separated by a period. eg : 0:9CB21226514442E0967F1250FA1EDFCB.C750D64DB9FC4174B42EEE7C8A93E9D2
     */
    public async deleteDiagram (mapAndDiagramId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/api/v1/diagrams/{mapAndDiagramId}'
            .replace('{' + 'mapAndDiagramId' + '}', encodeURIComponent(String(mapAndDiagramId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'mapAndDiagramId' is not null or undefined
        if (mapAndDiagramId === null || mapAndDiagramId === undefined) {
            throw new Error('Required parameter mapAndDiagramId was null or undefined when calling deleteDiagram.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.ApiKeyAuth.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Fetch the full definition of a single diagram including its layout.
     * @summary Returns a single diagram from a specific map.
     * @param mapAndDiagramId A string parameter that contains a map id and a diagram id separated by a period. eg : 0:9CB21226514442E0967F1250FA1EDFCB.C750D64DB9FC4174B42EEE7C8A93E9D2
     * @param languageId An integer value that identifies a specific language in the repository.
     */
    public async getDiagram (mapAndDiagramId: string, languageId?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DiagramModel;  }> {
        const localVarPath = this.basePath + '/api/v1/diagrams/{mapAndDiagramId}'
            .replace('{' + 'mapAndDiagramId' + '}', encodeURIComponent(String(mapAndDiagramId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'mapAndDiagramId' is not null or undefined
        if (mapAndDiagramId === null || mapAndDiagramId === undefined) {
            throw new Error('Required parameter mapAndDiagramId was null or undefined when calling getDiagram.');
        }

        if (languageId !== undefined) {
            localVarQueryParameters['languageId'] = ObjectSerializer.serialize(languageId, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.ApiKeyAuth.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DiagramModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "DiagramModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Query a range of diagrams from a single map by specifying a map id and an optional diagram title or parent diagram id.
     * @summary Query a range of diagrams from a single map.
     * @param mapId Id of the map to search in.
     * @param name Name to search for.
     * @param parentDiagramId Id of the parent diagram to search in.
     * @param languageId An integer value that identifies a specific language in the repository.
     */
    public async getDiagrams (mapId?: string, name?: string, parentDiagramId?: string, languageId?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DiagramCollection;  }> {
        const localVarPath = this.basePath + '/api/v1/diagrams';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (mapId !== undefined) {
            localVarQueryParameters['mapId'] = ObjectSerializer.serialize(mapId, "string");
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        if (parentDiagramId !== undefined) {
            localVarQueryParameters['parentDiagramId'] = ObjectSerializer.serialize(parentDiagramId, "string");
        }

        if (languageId !== undefined) {
            localVarQueryParameters['languageId'] = ObjectSerializer.serialize(languageId, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.ApiKeyAuth.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DiagramCollection;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "DiagramCollection");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update an existing diagram. For this operation to be successful the diagram must be an unlocked draft that the user has permission to update.
     * @summary Update an existing diagram.
     * @param mapAndDiagramId A string parameter that contains a map id and a diagram id separated by a period. eg : 0:9CB21226514442E0967F1250FA1EDFCB.C750D64DB9FC4174B42EEE7C8A93E9D2
     * @param layout Direction to use when automatically positioning diagram objects.
     * @param itemsPerLine Maximum number of objects to include per line. If this value is set to zero then all objects will appear in one continuous row or column.
     * @param objectWidth Width to use for activities and text boxes
     * @param objectHeight Height to use for activities and text boxes
     * @param horzGap Width of the gap to place between activities.
     * @param vertGap Height of the gap to place between activities.
     * @param diagramModel 
     */
    public async updateDiagram (mapAndDiagramId: string, layout?: 'None' | 'Rows' | 'Columns', itemsPerLine?: number, objectWidth?: number, objectHeight?: number, horzGap?: number, vertGap?: number, diagramModel?: DiagramModel, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DiagramModel;  }> {
        const localVarPath = this.basePath + '/api/v1/diagrams/{mapAndDiagramId}'
            .replace('{' + 'mapAndDiagramId' + '}', encodeURIComponent(String(mapAndDiagramId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'mapAndDiagramId' is not null or undefined
        if (mapAndDiagramId === null || mapAndDiagramId === undefined) {
            throw new Error('Required parameter mapAndDiagramId was null or undefined when calling updateDiagram.');
        }

        if (layout !== undefined) {
            localVarQueryParameters['layout'] = ObjectSerializer.serialize(layout, "'None' | 'Rows' | 'Columns'");
        }

        if (itemsPerLine !== undefined) {
            localVarQueryParameters['itemsPerLine'] = ObjectSerializer.serialize(itemsPerLine, "number");
        }

        if (objectWidth !== undefined) {
            localVarQueryParameters['objectWidth'] = ObjectSerializer.serialize(objectWidth, "number");
        }

        if (objectHeight !== undefined) {
            localVarQueryParameters['objectHeight'] = ObjectSerializer.serialize(objectHeight, "number");
        }

        if (horzGap !== undefined) {
            localVarQueryParameters['horzGap'] = ObjectSerializer.serialize(horzGap, "number");
        }

        if (vertGap !== undefined) {
            localVarQueryParameters['vertGap'] = ObjectSerializer.serialize(vertGap, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(diagramModel, "DiagramModel")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.ApiKeyAuth.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DiagramModel;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "DiagramModel");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
