{"version":3,"file":"RoutingControllers.js","sourceRoot":"","sources":["../../src/RoutingControllers.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action } from './Action';\nimport { ActionParameterHandler } from './ActionParameterHandler';\nimport { getFromContainer } from './container';\nimport { BaseDriver } from './driver/BaseDriver';\nimport { InterceptorInterface } from './InterceptorInterface';\nimport { MetadataBuilder } from './metadata-builder/MetadataBuilder';\nimport { ActionMetadata } from './metadata/ActionMetadata';\nimport { InterceptorMetadata } from './metadata/InterceptorMetadata';\nimport { RoutingControllersOptions } from './RoutingControllersOptions';\nimport { isPromiseLike } from './util/isPromiseLike';\nimport { runInSequence } from './util/runInSequence';\n\n/**\n * Registers controllers and middlewares in the given server framework.\n */\nexport class RoutingControllers<T extends BaseDriver> {\n  // -------------------------------------------------------------------------\n  // Private properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Used to check and handle controller action parameters.\n   */\n  private parameterHandler: ActionParameterHandler<T>;\n\n  /**\n   * Used to build metadata objects for controllers and middlewares.\n   */\n  private metadataBuilder: MetadataBuilder;\n\n  /**\n   * Global interceptors run on each controller action.\n   */\n  private interceptors: InterceptorMetadata[] = [];\n\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n  constructor(private driver: T, private options: RoutingControllersOptions) {\n    this.parameterHandler = new ActionParameterHandler(driver);\n    this.metadataBuilder = new MetadataBuilder(options);\n  }\n\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Initializes the things driver needs before routes and middleware registration.\n   */\n  initialize(): this {\n    this.driver.initialize();\n    return this;\n  }\n\n  /**\n   * Registers all given interceptors.\n   */\n  registerInterceptors(classes?: Function[]): this {\n    const interceptors = this.metadataBuilder\n      .buildInterceptorMetadata(classes)\n      .sort((middleware1, middleware2) => middleware1.priority - middleware2.priority)\n      .reverse();\n    this.interceptors.push(...interceptors);\n    return this;\n  }\n\n  /**\n   * Registers all given controllers and actions from those controllers.\n   */\n  registerControllers(classes?: Function[]): this {\n    const controllers = this.metadataBuilder.buildControllerMetadata(classes);\n    controllers.forEach(controller => {\n      controller.actions.forEach(actionMetadata => {\n        const interceptorFns = this.prepareInterceptors([\n          ...this.interceptors,\n          ...actionMetadata.controllerMetadata.interceptors,\n          ...actionMetadata.interceptors,\n        ]);\n        this.driver.registerAction(actionMetadata, (action: Action) => {\n          return this.executeAction(actionMetadata, action, interceptorFns);\n        });\n      });\n    });\n    this.driver.registerRoutes();\n    return this;\n  }\n\n  /**\n   * Registers post-execution middlewares in the driver.\n   */\n  registerMiddlewares(type: 'before' | 'after', classes?: Function[]): this {\n    this.metadataBuilder\n      .buildMiddlewareMetadata(classes)\n      .filter(middleware => middleware.global && middleware.type === type)\n      .sort((middleware1, middleware2) => middleware2.priority - middleware1.priority)\n      .forEach(middleware => this.driver.registerMiddleware(middleware));\n\n    return this;\n  }\n\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Executes given controller action.\n   */\n  protected executeAction(actionMetadata: ActionMetadata, action: Action, interceptorFns: Function[]) {\n    // compute all parameters\n    const paramsPromises = actionMetadata.params\n      .sort((param1, param2) => param1.index - param2.index)\n      .map(param => this.parameterHandler.handle(action, param));\n\n    // after all parameters are computed\n    return Promise.all(paramsPromises)\n      .then(params => {\n        // execute action and handle result\n        const allParams = actionMetadata.appendParams ? actionMetadata.appendParams(action).concat(params) : params;\n        const result = actionMetadata.methodOverride\n          ? actionMetadata.methodOverride(actionMetadata, action, allParams)\n          : actionMetadata.callMethod(allParams, action);\n        return this.handleCallMethodResult(result, actionMetadata, action, interceptorFns);\n      })\n      .catch(error => {\n        // otherwise simply handle error without action execution\n        return this.driver.handleError(error, actionMetadata, action);\n      });\n  }\n\n  /**\n   * Handles result of the action method execution.\n   */\n  protected handleCallMethodResult(\n    result: any,\n    action: ActionMetadata,\n    options: Action,\n    interceptorFns: Function[]\n  ): any {\n    if (isPromiseLike(result)) {\n      return result\n        .then((data: any) => {\n          return this.handleCallMethodResult(data, action, options, interceptorFns);\n        })\n        .catch((error: any) => {\n          return this.driver.handleError(error, action, options);\n        });\n    } else {\n      if (interceptorFns) {\n        const awaitPromise = runInSequence(interceptorFns, interceptorFn => {\n          const interceptedResult = interceptorFn(options, result);\n          if (isPromiseLike(interceptedResult)) {\n            return interceptedResult.then((resultFromPromise: any) => {\n              result = resultFromPromise;\n            });\n          } else {\n            result = interceptedResult;\n            return Promise.resolve();\n          }\n        });\n\n        return awaitPromise\n          .then(() => this.driver.handleSuccess(result, action, options))\n          .catch(error => this.driver.handleError(error, action, options));\n      } else {\n        return this.driver.handleSuccess(result, action, options);\n      }\n    }\n  }\n  /**\n   * Creates interceptors from the given \"use interceptors\".\n   */\n  protected prepareInterceptors(uses: InterceptorMetadata[]): Function[] {\n    return uses.map(use => {\n      if (use.interceptor.prototype && use.interceptor.prototype.intercept) {\n        // if this is function instance of InterceptorInterface\n        return function (action: Action, result: any) {\n          return getFromContainer<InterceptorInterface>(use.interceptor, action).intercept(action, result);\n        };\n      }\n      return use.interceptor;\n    });\n  }\n}\n"]}