{"version":3,"file":"ActionParameterHandler.js","sourceRoot":"","sources":["../../src/ActionParameterHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { plainToClass } from 'class-transformer';\nimport { validateOrReject as validate, ValidationError } from 'class-validator';\nimport { Action } from './Action';\nimport { BadRequestError } from './http-error/BadRequestError';\nimport { BaseDriver } from './driver/BaseDriver';\nimport { ParameterParseJsonError } from './error/ParameterParseJsonError';\nimport { ParamMetadata } from './metadata/ParamMetadata';\nimport { ParamRequiredError } from './error/ParamRequiredError';\nimport { AuthorizationRequiredError } from './error/AuthorizationRequiredError';\nimport { CurrentUserCheckerNotDefinedError } from './error/CurrentUserCheckerNotDefinedError';\nimport { isPromiseLike } from './util/isPromiseLike';\nimport { InvalidParamError } from './error/ParamNormalizationError';\n\n/**\n * Handles action parameter.\n */\nexport class ActionParameterHandler<T extends BaseDriver> {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n  constructor(private driver: T) {}\n\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Handles action parameter.\n   */\n  handle(action: Action, param: ParamMetadata): Promise<any> | any {\n    if (param.type === 'request') return action.request;\n\n    if (param.type === 'response') return action.response;\n\n    if (param.type === 'context') return action.context;\n\n    // get parameter value from request and normalize it\n    const value = this.normalizeParamValue(this.driver.getParamFromRequest(action, param), param);\n\n    if (isPromiseLike(value)) return value.then(value => this.handleValue(value, action, param));\n\n    return this.handleValue(value, action, param);\n  }\n\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Handles non-promise value.\n   */\n  protected handleValue(value: any, action: Action, param: ParamMetadata): Promise<any> | any {\n    // if transform function is given for this param then apply it\n    if (param.transform) value = param.transform(action, value);\n\n    // if its current-user decorator then get its value\n    if (param.type === 'current-user') {\n      if (!this.driver.currentUserChecker) throw new CurrentUserCheckerNotDefinedError();\n\n      value = this.driver.currentUserChecker(action);\n    }\n\n    // check cases when parameter is required but its empty and throw errors in this case\n    if (param.required) {\n      const isValueEmpty = value === null || value === undefined || value === '';\n      const isValueEmptyObject = typeof value === 'object' && Object.keys(value).length === 0;\n\n      if (param.type === 'body' && !param.name && (isValueEmpty || isValueEmptyObject)) {\n        // body has a special check and error message\n        return Promise.reject(new ParamRequiredError(action, param));\n      } else if (param.type === 'current-user') {\n        // current user has a special check as well\n\n        if (isPromiseLike(value)) {\n          return value.then(currentUser => {\n            if (!currentUser) return Promise.reject(new AuthorizationRequiredError(action));\n\n            return currentUser;\n          });\n        } else {\n          if (!value) return Promise.reject(new AuthorizationRequiredError(action));\n        }\n      } else if (param.name && isValueEmpty) {\n        // regular check for all other parameters // todo: figure out something with param.name usage and multiple things params (query params, upload files etc.)\n        return Promise.reject(new ParamRequiredError(action, param));\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Normalizes parameter value.\n   */\n  protected async normalizeParamValue(value: any, param: ParamMetadata): Promise<any> {\n    if (value === null || value === undefined) return value;\n\n    // if param value is an object and param type match, normalize its string properties\n    if (\n      typeof value === 'object' &&\n      ['queries', 'headers', 'params', 'cookies'].some(paramType => paramType === param.type)\n    ) {\n      await Promise.all(\n        Object.keys(value).map(async key => {\n          const keyValue = value[key];\n          if (typeof keyValue === 'string') {\n            const ParamType: Function | undefined = (Reflect as any).getMetadata(\n              'design:type',\n              param.targetType.prototype,\n              key\n            );\n            if (ParamType) {\n              const typeString = ParamType.name.toLowerCase();\n              value[key] = await this.normalizeParamValue(keyValue, {\n                ...param,\n                name: key,\n                targetType: ParamType,\n                targetName: typeString,\n              });\n            }\n          }\n        })\n      );\n    }\n    // if value is a string, normalize it to demanded type\n    else if (typeof value === 'string') {\n      switch (param.targetName) {\n        case 'number':\n        case 'string':\n        case 'boolean':\n        case 'date':\n          return this.normalizeStringValue(value, param.name, param.targetName);\n      }\n    }\n\n    // if target type is not primitive, transform and validate it\n    if (['number', 'string', 'boolean'].indexOf(param.targetName) === -1 && (param.parse || param.isTargetObject)) {\n      value = this.parseValue(value, param);\n      value = this.transformValue(value, param);\n      value = await this.validateValue(value, param);\n    }\n\n    return value;\n  }\n\n  /**\n   * Normalizes string value to number or boolean.\n   */\n  protected normalizeStringValue(value: string, parameterName: string, parameterType: string) {\n    switch (parameterType) {\n      case 'number':\n        if (value === '') {\n          throw new InvalidParamError(value, parameterName, parameterType);\n        }\n\n        const valueNumber = +value;\n        if (valueNumber === NaN) {\n          throw new InvalidParamError(value, parameterName, parameterType);\n        }\n\n        return valueNumber;\n\n      case 'boolean':\n        if (value === 'true' || value === '1' || value === '') {\n          return true;\n        } else if (value === 'false' || value === '0') {\n          return false;\n        } else {\n          throw new InvalidParamError(value, parameterName, parameterType);\n        }\n\n      case 'date':\n        const parsedDate = new Date(value);\n        if (Number.isNaN(parsedDate.getTime())) {\n          throw new InvalidParamError(value, parameterName, parameterType);\n        }\n        return parsedDate;\n\n      case 'string':\n      default:\n        return value;\n    }\n  }\n\n  /**\n   * Parses string value into a JSON object.\n   */\n  protected parseValue(value: any, paramMetadata: ParamMetadata): any {\n    if (typeof value === 'string') {\n      try {\n        return JSON.parse(value);\n      } catch (error) {\n        throw new ParameterParseJsonError(paramMetadata.name, value);\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Perform class-transformation if enabled.\n   */\n  protected transformValue(value: any, paramMetadata: ParamMetadata): any {\n    if (\n      this.driver.useClassTransformer &&\n      paramMetadata.actionMetadata.options.transformRequest !== false &&\n      paramMetadata.targetType &&\n      paramMetadata.targetType !== Object &&\n      !(value instanceof paramMetadata.targetType)\n    ) {\n      const options = paramMetadata.classTransform || this.driver.plainToClassTransformOptions;\n      value = plainToClass(paramMetadata.targetType, value, options);\n    }\n    return value;\n  }\n\n  /**\n   * Perform class-validation if enabled.\n   */\n  protected validateValue(value: any, paramMetadata: ParamMetadata): Promise<any> | any {\n    const isValidationEnabled =\n      paramMetadata.validate instanceof Object ||\n      paramMetadata.validate === true ||\n      (this.driver.enableValidation === true && paramMetadata.validate !== false);\n    const shouldValidate =\n      paramMetadata.targetType && paramMetadata.targetType !== Object && value instanceof paramMetadata.targetType;\n\n    if (isValidationEnabled && shouldValidate) {\n      const options = Object.assign({}, this.driver.validationOptions, paramMetadata.validate);\n      return validate(value, options)\n        .then(() => value)\n        .catch((validationErrors: ValidationError[]) => {\n          const error: any = new BadRequestError(\n            `Invalid ${paramMetadata.type}, check 'errors' property for more info.`\n          );\n          error.errors = validationErrors;\n          error.paramName = paramMetadata.name;\n          throw error;\n        });\n    }\n    return value;\n  }\n}\n"]}