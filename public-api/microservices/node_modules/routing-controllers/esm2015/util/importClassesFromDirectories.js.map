{"version":3,"file":"importClassesFromDirectories.js","sourceRoot":"","sources":["../../../src/util/importClassesFromDirectories.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAE7B;;GAEG;AACH,MAAM,UAAU,4BAA4B,CAAC,WAAqB,EAAE,OAAO,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;IAC1F,MAAM,eAAe,GAAG,UAAU,QAAa,EAAE,SAAqB;QACpE,IAAI,QAAQ,YAAY,QAAQ,EAAE;YAChC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC1B;aAAM,IAAI,QAAQ,YAAY,KAAK,EAAE;YACpC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,eAAe,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;SAC7D;aAAM,IAAI,QAAQ,YAAY,MAAM,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YACrE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;SACjF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IAEF,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;QACnD,8DAA8D;QAC9D,OAAO,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnE,CAAC,EAAE,EAAc,CAAC,CAAC;IAEnB,MAAM,IAAI,GAAG,QAAQ;SAClB,MAAM,CAAC,IAAI,CAAC,EAAE;QACb,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAClE,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,YAAY,KAAK,OAAO,CAAC;IAChF,CAAC,CAAC;SACD,GAAG,CAAC,IAAI,CAAC,EAAE;QACV,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;IAEL,OAAO,eAAe,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import * as path from 'path';\n\n/**\n * Loads all exported classes from the given directory.\n */\nexport function importClassesFromDirectories(directories: string[], formats = ['.js', '.ts']): Function[] {\n  const loadFileClasses = function (exported: any, allLoaded: Function[]) {\n    if (exported instanceof Function) {\n      allLoaded.push(exported);\n    } else if (exported instanceof Array) {\n      exported.forEach((i: any) => loadFileClasses(i, allLoaded));\n    } else if (exported instanceof Object || typeof exported === 'object') {\n      Object.keys(exported).forEach(key => loadFileClasses(exported[key], allLoaded));\n    }\n\n    return allLoaded;\n  };\n\n  const allFiles = directories.reduce((allDirs, dir) => {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    return allDirs.concat(require('glob').sync(path.normalize(dir)));\n  }, [] as string[]);\n\n  const dirs = allFiles\n    .filter(file => {\n      const dtsExtension = file.substring(file.length - 5, file.length);\n      return formats.indexOf(path.extname(file)) !== -1 && dtsExtension !== '.d.ts';\n    })\n    .map(file => {\n      return require(file);\n    });\n\n  return loadFileClasses(dirs, []);\n}\n"]}