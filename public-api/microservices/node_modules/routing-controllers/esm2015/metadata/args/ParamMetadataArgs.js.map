{"version":3,"file":"ParamMetadataArgs.js","sourceRoot":"","sources":["../../../../src/metadata/args/ParamMetadataArgs.ts"],"names":[],"mappings":"","sourcesContent":["import { ValidatorOptions } from 'class-validator';\nimport { ClassTransformOptions } from 'class-transformer';\nimport { ParamType } from '../types/ParamType';\n\n/**\n * Controller metadata used to storage information about registered parameters.\n */\nexport interface ParamMetadataArgs {\n  /**\n   * Parameter object.\n   */\n  object: any;\n\n  /**\n   * Method on which's parameter is attached.\n   */\n  method: string;\n\n  /**\n   * Index (# number) of the parameter in the method signature.\n   */\n  index: number;\n\n  /**\n   * Parameter type.\n   */\n  type: ParamType;\n\n  /**\n   * Parameter name.\n   */\n  name?: string;\n\n  /**\n   * Specifies if parameter should be parsed as json or not.\n   */\n  parse: boolean;\n\n  /**\n   * Indicates if this parameter is required or not\n   */\n  required: boolean;\n\n  /**\n   * Transforms the value.\n   */\n  transform?: (value?: any, request?: any, response?: any) => Promise<any> | any;\n\n  /**\n   * Extra parameter options.\n   */\n  extraOptions?: any;\n\n  /**\n   * Class transform options used to perform plainToClass operation.\n   */\n  classTransform?: ClassTransformOptions;\n\n  /**\n   * If true, class-validator will be used to validate param object.\n   * If validation options are given then it means validation will be applied (is true).\n   */\n  validate?: boolean | ValidatorOptions;\n\n  /**\n   * Explicitly set type which should be used for Body to perform transformation.\n   */\n  explicitType?: any;\n}\n"]}