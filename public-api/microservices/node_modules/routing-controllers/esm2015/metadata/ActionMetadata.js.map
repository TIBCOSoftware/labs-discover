{"version":3,"file":"ActionMetadata.js","sourceRoot":"","sources":["../../../src/metadata/ActionMetadata.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action } from '../Action';\nimport { ActionMetadataArgs } from './args/ActionMetadataArgs';\nimport { ActionType } from './types/ActionType';\nimport { ClassTransformOptions } from 'class-transformer';\nimport { ControllerMetadata } from './ControllerMetadata';\nimport { InterceptorMetadata } from './InterceptorMetadata';\nimport { ParamMetadata } from './ParamMetadata';\nimport { ResponseHandlerMetadata } from './ResponseHandleMetadata';\nimport { HandlerOptions } from '../decorator-options/HandlerOptions';\nimport { RoutingControllersOptions } from '../RoutingControllersOptions';\nimport { UseMetadata } from './UseMetadata';\n\n/**\n * Action metadata.\n */\nexport class ActionMetadata {\n  // -------------------------------------------------------------------------\n  // Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Action's controller.\n   */\n  controllerMetadata: ControllerMetadata;\n\n  /**\n   * Action's parameters.\n   */\n  params: ParamMetadata[];\n\n  /**\n   * Action's use metadatas.\n   */\n  uses: UseMetadata[];\n\n  /**\n   * Action's use interceptors.\n   */\n  interceptors: InterceptorMetadata[];\n\n  /**\n   * Class on which's method this action is attached.\n   */\n  target: Function;\n\n  /**\n   * Object's method that will be executed on this action.\n   */\n  method: string;\n\n  /**\n   * Action-specific options.\n   */\n  options: HandlerOptions;\n\n  /**\n   * Action type represents http method used for the registered route. Can be one of the value defined in ActionTypes\n   * class.\n   */\n  type: ActionType;\n\n  /**\n   * Route to be registered for the action.\n   */\n  route: string | RegExp;\n\n  /**\n   * Full route to this action (includes controller base route).\n   */\n  fullRoute: string | RegExp;\n\n  /**\n   * Indicates if this action uses Body.\n   */\n  isBodyUsed: boolean;\n\n  /**\n   * Indicates if this action uses Uploaded File.\n   */\n  isFileUsed: boolean;\n\n  /**\n   * Indicates if this action uses Uploaded Files.\n   */\n  isFilesUsed: boolean;\n\n  /**\n   * Indicates if controller of this action is json-typed.\n   */\n  isJsonTyped: boolean;\n\n  /**\n   * Indicates if this action uses Authorized decorator.\n   */\n  isAuthorizedUsed: boolean;\n\n  /**\n   * Class-transformer options for the action response content.\n   */\n  responseClassTransformOptions: ClassTransformOptions;\n\n  /**\n   * Http code to be used on undefined action returned content.\n   */\n  undefinedResultCode: number | Function;\n\n  /**\n   * Http code to be used on null action returned content.\n   */\n  nullResultCode: number | Function;\n\n  /**\n   * Http code to be set on successful response.\n   */\n  successHttpCode: number;\n\n  /**\n   * Specifies redirection url for this action.\n   */\n  redirect: string;\n\n  /**\n   * Rendered template to be used for this controller action.\n   */\n  renderedTemplate: string;\n\n  /**\n   * Response headers to be set.\n   */\n  headers: { [name: string]: any };\n\n  /**\n   * Extra options used by @Body decorator.\n   */\n  bodyExtraOptions: any;\n\n  /**\n   * Roles set by @Authorized decorator.\n   */\n  authorizedRoles: any[];\n\n  /**\n   * Params to be appended to the method call.\n   */\n  appendParams?: (action: Action) => any[];\n\n  /**\n   * Special function that will be called instead of orignal method of the target.\n   */\n  methodOverride?: (actionMetadata: ActionMetadata, action: Action, params: any[]) => Promise<any> | any;\n\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n  constructor(\n    controllerMetadata: ControllerMetadata,\n    args: ActionMetadataArgs,\n    private globalOptions: RoutingControllersOptions\n  ) {\n    this.controllerMetadata = controllerMetadata;\n    this.route = args.route;\n    this.target = args.target;\n    this.method = args.method;\n    this.options = args.options;\n    this.type = args.type;\n    this.appendParams = args.appendParams;\n    this.methodOverride = args.methodOverride;\n  }\n\n  // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Appends base route to a given regexp route.\n   */\n  static appendBaseRoute(baseRoute: string, route: RegExp | string) {\n    const prefix = `${baseRoute.length > 0 && baseRoute.indexOf('/') < 0 ? '/' : ''}${baseRoute}`;\n    if (typeof route === 'string') return `${prefix}${route}`;\n\n    if (!baseRoute || baseRoute === '') return route;\n\n    const fullPath = `^${prefix}${route.toString().substr(1)}?$`;\n\n    return new RegExp(fullPath, route.flags);\n  }\n\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Builds everything action metadata needs.\n   * Action metadata can be used only after its build.\n   */\n  build(responseHandlers: ResponseHandlerMetadata[]) {\n    const classTransformerResponseHandler = responseHandlers.find(\n      handler => handler.type === 'response-class-transform-options'\n    );\n    const undefinedResultHandler = responseHandlers.find(handler => handler.type === 'on-undefined');\n    const nullResultHandler = responseHandlers.find(handler => handler.type === 'on-null');\n    const successCodeHandler = responseHandlers.find(handler => handler.type === 'success-code');\n    const redirectHandler = responseHandlers.find(handler => handler.type === 'redirect');\n    const renderedTemplateHandler = responseHandlers.find(handler => handler.type === 'rendered-template');\n    const authorizedHandler = responseHandlers.find(handler => handler.type === 'authorized');\n    const contentTypeHandler = responseHandlers.find(handler => handler.type === 'content-type');\n    const bodyParam = this.params.find(param => param.type === 'body');\n\n    if (classTransformerResponseHandler) this.responseClassTransformOptions = classTransformerResponseHandler.value;\n\n    this.undefinedResultCode = undefinedResultHandler\n      ? undefinedResultHandler.value\n      : this.globalOptions.defaults && this.globalOptions.defaults.undefinedResultCode;\n\n    this.nullResultCode = nullResultHandler\n      ? nullResultHandler.value\n      : this.globalOptions.defaults && this.globalOptions.defaults.nullResultCode;\n\n    if (successCodeHandler) this.successHttpCode = successCodeHandler.value;\n    if (redirectHandler) this.redirect = redirectHandler.value;\n    if (renderedTemplateHandler) this.renderedTemplate = renderedTemplateHandler.value;\n\n    this.bodyExtraOptions = bodyParam ? bodyParam.extraOptions : undefined;\n    this.isBodyUsed = !!this.params.find(param => param.type === 'body' || param.type === 'body-param');\n    this.isFilesUsed = !!this.params.find(param => param.type === 'files');\n    this.isFileUsed = !!this.params.find(param => param.type === 'file');\n    this.isJsonTyped =\n      contentTypeHandler !== undefined\n        ? /json/.test(contentTypeHandler.value)\n        : this.controllerMetadata.type === 'json';\n    this.fullRoute = this.buildFullRoute();\n    this.headers = this.buildHeaders(responseHandlers);\n\n    this.isAuthorizedUsed = this.controllerMetadata.isAuthorizedUsed || !!authorizedHandler;\n    this.authorizedRoles = (this.controllerMetadata.authorizedRoles || []).concat(\n      (authorizedHandler && authorizedHandler.value) || []\n    );\n  }\n\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Calls action method.\n   * Action method is an action defined in a user controller.\n   */\n  callMethod(params: any[], action: Action) {\n    const controllerInstance = this.controllerMetadata.getInstance(action);\n    // eslint-disable-next-line prefer-spread\n    return controllerInstance[this.method].apply(controllerInstance, params);\n  }\n\n  // -------------------------------------------------------------------------\n  // Private Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Builds full action route.\n   */\n  private buildFullRoute(): string | RegExp {\n    if (this.route instanceof RegExp) {\n      if (this.controllerMetadata.route) {\n        return ActionMetadata.appendBaseRoute(this.controllerMetadata.route, this.route);\n      }\n      return this.route;\n    }\n\n    let path: string = '';\n    if (this.controllerMetadata.route) path += this.controllerMetadata.route;\n    if (this.route && typeof this.route === 'string') path += this.route;\n    return path;\n  }\n\n  /**\n   * Builds action response headers.\n   */\n  private buildHeaders(responseHandlers: ResponseHandlerMetadata[]) {\n    const contentTypeHandler = responseHandlers.find(handler => handler.type === 'content-type');\n    const locationHandler = responseHandlers.find(handler => handler.type === 'location');\n\n    const headers: { [name: string]: string } = {};\n    if (locationHandler) headers['Location'] = locationHandler.value;\n\n    if (contentTypeHandler) headers['Content-type'] = contentTypeHandler.value;\n\n    const headerHandlers = responseHandlers.filter(handler => handler.type === 'header');\n    if (headerHandlers) headerHandlers.map(handler => (headers[handler.value] = handler.secondaryValue));\n\n    return headers;\n  }\n}\n"]}