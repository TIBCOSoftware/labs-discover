{"version":3,"file":"ControllerMetadata.js","sourceRoot":"","sources":["../../../src/metadata/ControllerMetadata.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAMhD;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAkD7B,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,IAA4B;QACtC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;IAC9B,CAAC;IAED,4EAA4E;IAC5E,YAAY;IACZ,4EAA4E;IAE5E;;;OAGG;IACH,WAAW,CAAC,MAAc;QACxB,OAAO,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC/C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACH,KAAK,CAAC,gBAA2C;QAC/C,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,KAAK,YAAY,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7G,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,iBAAiB,CAAC;QAC5C,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,iBAAiB,IAAI,iBAAiB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;IACzF,CAAC;CACF","sourcesContent":["import { ActionMetadata } from './ActionMetadata';\nimport { ControllerMetadataArgs } from './args/ControllerMetadataArgs';\nimport { UseMetadata } from './UseMetadata';\nimport { getFromContainer } from '../container';\nimport { ControllerOptions } from '../decorator-options/ControllerOptions';\nimport { ResponseHandlerMetadata } from './ResponseHandleMetadata';\nimport { InterceptorMetadata } from './InterceptorMetadata';\nimport { Action } from '../Action';\n\n/**\n * Controller metadata.\n */\nexport class ControllerMetadata {\n  // -------------------------------------------------------------------------\n  // Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Controller actions.\n   */\n  actions: ActionMetadata[];\n\n  /**\n   * Indicates object which is used by this controller.\n   */\n  target: Function;\n\n  /**\n   * Base route for all actions registered in this controller.\n   */\n  route: string;\n\n  /**\n   * Controller type. Can be default or json-typed. Json-typed controllers operate with json requests and responses.\n   */\n  type: 'default' | 'json';\n\n  /**\n   * Options that apply to all controller actions.\n   */\n  options: ControllerOptions;\n\n  /**\n   * Middleware \"use\"-s applied to a whole controller.\n   */\n  uses: UseMetadata[];\n\n  /**\n   * Middleware \"use\"-s applied to a whole controller.\n   */\n  interceptors: InterceptorMetadata[];\n\n  /**\n   * Indicates if this action uses Authorized decorator.\n   */\n  isAuthorizedUsed: boolean;\n\n  /**\n   * Roles set by @Authorized decorator.\n   */\n  authorizedRoles: any[];\n\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n  constructor(args: ControllerMetadataArgs) {\n    this.target = args.target;\n    this.route = args.route;\n    this.type = args.type;\n    this.options = args.options;\n  }\n\n  // -------------------------------------------------------------------------\n  // Accessors\n  // -------------------------------------------------------------------------\n\n  /**\n   * Gets instance of the controller.\n   * @param action Details around the request session\n   */\n  getInstance(action: Action): any {\n    return getFromContainer(this.target, action);\n  }\n\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Builds everything controller metadata needs.\n   * Controller metadata should be used only after its build.\n   */\n  build(responseHandlers: ResponseHandlerMetadata[]) {\n    const authorizedHandler = responseHandlers.find(handler => handler.type === 'authorized' && !handler.method);\n    this.isAuthorizedUsed = !!authorizedHandler;\n    this.authorizedRoles = [].concat((authorizedHandler && authorizedHandler.value) || []);\n  }\n}\n"]}