{"version":3,"file":"ParamMetadata.js","sourceRoot":"","sources":["../../../src/metadata/ParamMetadata.ts"],"names":[],"mappings":"AAOA;;GAEG;AACH,MAAM,OAAO,aAAa;IAuFxB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,cAA8B,EAAE,IAAuB;QAnDnE;;WAEG;QACH,eAAU,GAAW,EAAE,CAAC;QAExB;;WAEG;QACH,mBAAc,GAAY,KAAK,CAAC;QA4C9B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QAErC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE9B,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;SACrC;aAAM;YACL,MAAM,UAAU,GAAI,OAAe,CAAC,WAAW,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/F,IAAI,OAAO,UAAU,KAAK,WAAW,EAAE;gBACrC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC1C;SACF;QAED,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,IAAI,CAAC,UAAU,YAAY,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;gBAC/D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;aACtD;iBAAM,IAAI,OAAO,IAAI,CAAC,UAAU,KAAK,QAAQ,EAAE;gBAC9C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;aACjD;YACD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,YAAY,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC;SACzG;IACH,CAAC;CACF","sourcesContent":["import { ValidatorOptions } from 'class-validator';\nimport { ActionMetadata } from './ActionMetadata';\nimport { ParamMetadataArgs } from './args/ParamMetadataArgs';\nimport { ParamType } from './types/ParamType';\nimport { ClassTransformOptions } from 'class-transformer';\nimport { Action } from '../Action';\n\n/**\n * Action Parameter metadata.\n */\nexport class ParamMetadata {\n  // -------------------------------------------------------------------------\n  // Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Parameter's action.\n   */\n  actionMetadata: ActionMetadata;\n\n  /**\n   * Object on which's method's parameter this parameter is attached.\n   */\n  object: any;\n\n  /**\n   * Method on which's parameter is attached.\n   */\n  method: string;\n\n  /**\n   * Index (# number) of the parameter in the method signature.\n   */\n  index: number;\n\n  /**\n   * Parameter type.\n   */\n  type: ParamType;\n\n  /**\n   * Parameter name.\n   */\n  name: string;\n\n  /**\n   * Parameter target type.\n   */\n  targetType?: any;\n\n  /**\n   * Parameter target type's name in lowercase.\n   */\n  targetName: string = '';\n\n  /**\n   * Indicates if target type is an object.\n   */\n  isTargetObject: boolean = false;\n\n  /**\n   * Parameter target.\n   */\n  target: any;\n\n  /**\n   * Specifies if parameter should be parsed as json or not.\n   */\n  parse: boolean;\n\n  /**\n   * Indicates if this parameter is required or not\n   */\n  required: boolean;\n\n  /**\n   * Transforms the value.\n   */\n  transform: (action: Action, value?: any) => Promise<any> | any;\n\n  /**\n   * Additional parameter options.\n   * For example it can be uploader middleware options or body-parser middleware options.\n   */\n  extraOptions: any;\n\n  /**\n   * Class transform options used to perform plainToClass operation.\n   */\n  classTransform?: ClassTransformOptions;\n\n  /**\n   * If true, class-validator will be used to validate param object.\n   * If validation options are given then it means validation will be applied (is true).\n   */\n  validate?: boolean | ValidatorOptions;\n\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n  constructor(actionMetadata: ActionMetadata, args: ParamMetadataArgs) {\n    this.actionMetadata = actionMetadata;\n\n    this.target = args.object.constructor;\n    this.method = args.method;\n    this.extraOptions = args.extraOptions;\n    this.index = args.index;\n    this.type = args.type;\n    this.name = args.name;\n    this.parse = args.parse;\n    this.required = args.required;\n    this.transform = args.transform;\n    this.classTransform = args.classTransform;\n    this.validate = args.validate;\n\n    if (args.explicitType) {\n      this.targetType = args.explicitType;\n    } else {\n      const ParamTypes = (Reflect as any).getMetadata('design:paramtypes', args.object, args.method);\n      if (typeof ParamTypes !== 'undefined') {\n        this.targetType = ParamTypes[args.index];\n      }\n    }\n\n    if (this.targetType) {\n      if (this.targetType instanceof Function && this.targetType.name) {\n        this.targetName = this.targetType.name.toLowerCase();\n      } else if (typeof this.targetType === 'string') {\n        this.targetName = this.targetType.toLowerCase();\n      }\n      this.isTargetObject = this.targetType instanceof Function || this.targetType.toLowerCase() === 'object';\n    }\n  }\n}\n"]}