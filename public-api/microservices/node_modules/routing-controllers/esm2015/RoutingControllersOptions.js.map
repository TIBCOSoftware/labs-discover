{"version":3,"file":"RoutingControllersOptions.js","sourceRoot":"","sources":["../../src/RoutingControllersOptions.ts"],"names":[],"mappings":"","sourcesContent":["import { ClassTransformOptions } from 'class-transformer';\nimport { ValidatorOptions } from 'class-validator';\nimport { AuthorizationChecker } from './AuthorizationChecker';\nimport { CurrentUserChecker } from './CurrentUserChecker';\n\n/**\n * Routing controller initialization options.\n */\nexport interface RoutingControllersOptions {\n  /**\n   * Indicates if cors are enabled.\n   * This requires installation of additional module (cors for express and kcors for koa).\n   */\n  cors?: boolean | Object;\n\n  /**\n   * Global route prefix, for example '/api'.\n   */\n  routePrefix?: string;\n\n  /**\n   * List of controllers to register in the framework or directories from where to import all your controllers.\n   */\n  controllers?: Function[] | string[];\n\n  /**\n   * List of middlewares to register in the framework or directories from where to import all your middlewares.\n   */\n  middlewares?: Function[] | string[];\n\n  /**\n   * List of interceptors to register in the framework or directories from where to import all your interceptors.\n   */\n  interceptors?: Function[] | string[];\n\n  /**\n   * Indicates if class-transformer should be used to perform serialization / deserialization.\n   */\n  classTransformer?: boolean;\n\n  /**\n   * Global class transformer options passed to class-transformer during classToPlain operation.\n   * This operation is being executed when server returns response to user.\n   */\n  classToPlainTransformOptions?: ClassTransformOptions;\n\n  /**\n   * Global class transformer options passed to class-transformer during plainToClass operation.\n   * This operation is being executed when parsing user parameters.\n   */\n  plainToClassTransformOptions?: ClassTransformOptions;\n\n  /**\n   * Indicates if class-validator should be used to auto validate objects injected into params.\n   * You can also directly pass validator options to enable validator with a given options.\n   */\n  validation?: boolean | ValidatorOptions;\n\n  /**\n   * Indicates if development mode is enabled.\n   * By default its enabled if your NODE_ENV is not equal to \"production\".\n   */\n  development?: boolean;\n\n  /**\n   * Indicates if default routing-controller's error handler is enabled or not.\n   * Enabled by default.\n   */\n  defaultErrorHandler?: boolean;\n\n  /**\n   * Map of error overrides.\n   */\n  errorOverridingMap?: { [key: string]: any };\n\n  /**\n   * Special function used to check user authorization roles per request.\n   * Must return true or promise with boolean true resolved for authorization to succeed.\n   */\n  authorizationChecker?: AuthorizationChecker;\n\n  /**\n   * Special function used to get currently authorized user.\n   */\n  currentUserChecker?: CurrentUserChecker;\n\n  /**\n   * Default settings\n   */\n  defaults?: {\n    /**\n     * If set, all null responses will return specified status code by default\n     */\n    nullResultCode?: number;\n\n    /**\n     * If set, all undefined responses will return specified status code by default\n     */\n    undefinedResultCode?: number;\n\n    /**\n     * Default param options\n     */\n    paramOptions?: {\n      /**\n       * If true, all non-set parameters will be required by default\n       */\n      required?: boolean;\n    };\n  };\n}\n"]}