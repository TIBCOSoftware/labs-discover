{"version":3,"file":"UseInterceptor.js","sourceRoot":"","sources":["../../../src/decorator/UseInterceptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,UAAU,CAAC;AAelD;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAC,GAAG,YAAsE;IACtG,OAAO,UAAU,gBAAmC,EAAE,UAAmB;QACvE,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;YACjC,sBAAsB,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC;gBAC5C,WAAW,EAAE,WAAW;gBACxB,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAE,gBAA6B;gBAClF,MAAM,EAAE,UAAU;aACnB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { getMetadataArgsStorage } from '../index';\nimport { Action } from '../Action';\n\n/**\n * Specifies a given interceptor middleware or interceptor function to be used for controller or controller action.\n * Must be set to controller action or controller class.\n */\nexport function UseInterceptor(...interceptors: Array<Function>): Function;\n\n/**\n * Specifies a given interceptor middleware or interceptor function to be used for controller or controller action.\n * Must be set to controller action or controller class.\n */\nexport function UseInterceptor(...interceptors: Array<(action: Action, result: any) => any>): Function;\n\n/**\n * Specifies a given interceptor middleware or interceptor function to be used for controller or controller action.\n * Must be set to controller action or controller class.\n */\nexport function UseInterceptor(...interceptors: Array<Function | ((action: Action, result: any) => any)>): Function {\n  return function (objectOrFunction: Object | Function, methodName?: string) {\n    interceptors.forEach(interceptor => {\n      getMetadataArgsStorage().useInterceptors.push({\n        interceptor: interceptor,\n        target: methodName ? objectOrFunction.constructor : (objectOrFunction as Function),\n        method: methodName,\n      });\n    });\n  };\n}\n"]}