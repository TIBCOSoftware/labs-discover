{"version":3,"file":"Authorized.js","sourceRoot":"","sources":["../../../src/decorator/Authorized.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,UAAU,CAAC;AA0BlD;;;GAGG;AACH,MAAM,UAAU,UAAU,CAAC,WAA0C;IACnE,OAAO,UAAU,WAA8B,EAAE,MAAe;QAC9D,sBAAsB,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC;YAC7C,IAAI,EAAE,YAAY;YAClB,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAE,WAAwB;YACpE,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,WAAW;SACnB,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { getMetadataArgsStorage } from '../index';\n\n/**\n * Marks controller action to have a special access.\n * Authorization logic must be defined in routing-controllers settings.\n */\nexport function Authorized(): Function;\n\n/**\n * Marks controller action to have a special access.\n * Authorization logic must be defined in routing-controllers settings.\n */\nexport function Authorized(role: any): Function;\n\n/**\n * Marks controller action to have a special access.\n * Authorization logic must be defined in routing-controllers settings.\n */\nexport function Authorized(roles: any[]): Function;\n\n/**\n * Marks controller action to have a special access.\n * Authorization logic must be defined in routing-controllers settings.\n */\nexport function Authorized(role: Function): Function;\n\n/**\n * Marks controller action to have a special access.\n * Authorization logic must be defined in routing-controllers settings.\n */\nexport function Authorized(roleOrRoles?: string | string[] | Function): Function {\n  return function (clsOrObject: Function | Object, method?: string) {\n    getMetadataArgsStorage().responseHandlers.push({\n      type: 'authorized',\n      target: method ? clsOrObject.constructor : (clsOrObject as Function),\n      method: method,\n      value: roleOrRoles,\n    });\n  };\n}\n"]}