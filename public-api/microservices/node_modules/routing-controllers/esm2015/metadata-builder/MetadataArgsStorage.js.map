{"version":3,"file":"MetadataArgsStorage.js","sourceRoot":"","sources":["../../../src/metadata-builder/MetadataArgsStorage.ts"],"names":[],"mappings":"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","sourcesContent":["import { ControllerMetadataArgs } from '../metadata/args/ControllerMetadataArgs';\nimport { ActionMetadataArgs } from '../metadata/args/ActionMetadataArgs';\nimport { ParamMetadataArgs } from '../metadata/args/ParamMetadataArgs';\nimport { ResponseHandlerMetadataArgs } from '../metadata/args/ResponseHandleMetadataArgs';\nimport { MiddlewareMetadataArgs } from '../metadata/args/MiddlewareMetadataArgs';\nimport { UseMetadataArgs } from '../metadata/args/UseMetadataArgs';\nimport { UseInterceptorMetadataArgs } from '../metadata/args/UseInterceptorMetadataArgs';\nimport { InterceptorMetadataArgs } from '../metadata/args/InterceptorMetadataArgs';\n\n/**\n * Storage all metadatas read from decorators.\n */\nexport class MetadataArgsStorage {\n  // -------------------------------------------------------------------------\n  // Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Registered controller metadata args.\n   */\n  controllers: ControllerMetadataArgs[] = [];\n\n  /**\n   * Registered middleware metadata args.\n   */\n  middlewares: MiddlewareMetadataArgs[] = [];\n\n  /**\n   * Registered interceptor metadata args.\n   */\n  interceptors: InterceptorMetadataArgs[] = [];\n\n  /**\n   * Registered \"use middleware\" metadata args.\n   */\n  uses: UseMetadataArgs[] = [];\n\n  /**\n   * Registered \"use interceptor\" metadata args.\n   */\n  useInterceptors: UseInterceptorMetadataArgs[] = [];\n\n  /**\n   * Registered action metadata args.\n   */\n  actions: ActionMetadataArgs[] = [];\n\n  /**\n   * Registered param metadata args.\n   */\n  params: ParamMetadataArgs[] = [];\n\n  /**\n   * Registered response handler metadata args.\n   */\n  responseHandlers: ResponseHandlerMetadataArgs[] = [];\n\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Filters registered middlewares by a given classes.\n   */\n  filterMiddlewareMetadatasForClasses(classes: Function[]): MiddlewareMetadataArgs[] {\n    return classes.map(cls => this.middlewares.find(mid => mid.target === cls)).filter(midd => midd !== undefined); // this might be not needed if all classes where decorated with `@Middleware`\n  }\n\n  /**\n   * Filters registered interceptors by a given classes.\n   */\n  filterInterceptorMetadatasForClasses(classes: Function[]): InterceptorMetadataArgs[] {\n    return this.interceptors.filter(ctrl => {\n      return classes.filter(cls => ctrl.target === cls).length > 0;\n    });\n  }\n\n  /**\n   * Filters registered controllers by a given classes.\n   */\n  filterControllerMetadatasForClasses(classes: Function[]): ControllerMetadataArgs[] {\n    return this.controllers.filter(ctrl => {\n      return classes.filter(cls => ctrl.target === cls).length > 0;\n    });\n  }\n\n  /**\n   * Filters registered actions by a given classes.\n   */\n  filterActionsWithTarget(target: Function): ActionMetadataArgs[] {\n    return this.actions.filter(action => action.target === target);\n  }\n\n  /**\n   * Filters registered \"use middlewares\" by a given target class and method name.\n   */\n  filterUsesWithTargetAndMethod(target: Function, methodName: string): UseMetadataArgs[] {\n    return this.uses.filter(use => {\n      return use.target === target && use.method === methodName;\n    });\n  }\n\n  /**\n   * Filters registered \"use interceptors\" by a given target class and method name.\n   */\n  filterInterceptorUsesWithTargetAndMethod(target: Function, methodName: string): UseInterceptorMetadataArgs[] {\n    return this.useInterceptors.filter(use => {\n      return use.target === target && use.method === methodName;\n    });\n  }\n\n  /**\n   * Filters parameters by a given classes.\n   */\n  filterParamsWithTargetAndMethod(target: Function, methodName: string): ParamMetadataArgs[] {\n    return this.params.filter(param => {\n      return param.object.constructor === target && param.method === methodName;\n    });\n  }\n\n  /**\n   * Filters response handlers by a given class.\n   */\n  filterResponseHandlersWithTarget(target: Function): ResponseHandlerMetadataArgs[] {\n    return this.responseHandlers.filter(property => {\n      return property.target === target;\n    });\n  }\n\n  /**\n   * Filters response handlers by a given classes.\n   */\n  filterResponseHandlersWithTargetAndMethod(target: Function, methodName: string): ResponseHandlerMetadataArgs[] {\n    return this.responseHandlers.filter(property => {\n      return property.target === target && property.method === methodName;\n    });\n  }\n\n  /**\n   * Removes all saved metadata.\n   */\n  reset() {\n    this.controllers = [];\n    this.middlewares = [];\n    this.interceptors = [];\n    this.uses = [];\n    this.useInterceptors = [];\n    this.actions = [];\n    this.params = [];\n    this.responseHandlers = [];\n  }\n}\n"]}