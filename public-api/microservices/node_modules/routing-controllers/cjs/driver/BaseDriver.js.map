{"version":3,"file":"BaseDriver.js","sourceRoot":"","sources":["../../../src/driver/BaseDriver.ts"],"names":[],"mappings":"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","sourcesContent":["import { ValidatorOptions } from 'class-validator';\nimport { ClassTransformOptions, classToPlain } from 'class-transformer';\n\nimport { HttpError } from '../http-error/HttpError';\nimport { CurrentUserChecker } from '../CurrentUserChecker';\nimport { AuthorizationChecker } from '../AuthorizationChecker';\nimport { ActionMetadata } from '../metadata/ActionMetadata';\nimport { ParamMetadata } from '../metadata/ParamMetadata';\nimport { MiddlewareMetadata } from '../metadata/MiddlewareMetadata';\nimport { Action } from '../Action';\n\n/**\n * Base driver functionality for all other drivers.\n * Abstract layer to organize controllers integration with different http server implementations.\n */\nexport abstract class BaseDriver {\n  // -------------------------------------------------------------------------\n  // Public Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Reference to the underlying framework app object.\n   */\n  app: any;\n\n  /**\n   * Indicates if class-transformer should be used or not.\n   */\n  useClassTransformer: boolean;\n\n  /**\n   * Indicates if class-validator should be used or not.\n   */\n  enableValidation: boolean;\n\n  /**\n   * Global class transformer options passed to class-transformer during classToPlain operation.\n   * This operation is being executed when server returns response to user.\n   */\n  classToPlainTransformOptions: ClassTransformOptions;\n\n  /**\n   * Global class-validator options passed during validate operation.\n   */\n  validationOptions: ValidatorOptions;\n\n  /**\n   * Global class transformer options passed to class-transformer during plainToClass operation.\n   * This operation is being executed when parsing user parameters.\n   */\n  plainToClassTransformOptions: ClassTransformOptions;\n\n  /**\n   * Indicates if default routing-controllers error handler should be used or not.\n   */\n  isDefaultErrorHandlingEnabled: boolean;\n\n  /**\n   * Indicates if routing-controllers should operate in development mode.\n   */\n  developmentMode: boolean;\n\n  /**\n   * Global application prefix.\n   */\n  routePrefix: string = '';\n\n  /**\n   * Indicates if cors are enabled.\n   * This requires installation of additional module (cors for express and kcors for koa).\n   */\n  cors?: boolean | Object;\n\n  /**\n   * Map of error overrides.\n   */\n  errorOverridingMap: { [key: string]: any };\n\n  /**\n   * Special function used to check user authorization roles per request.\n   * Must return true or promise with boolean true resolved for authorization to succeed.\n   */\n  authorizationChecker?: AuthorizationChecker;\n\n  /**\n   * Special function used to get currently authorized user.\n   */\n  currentUserChecker?: CurrentUserChecker;\n\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  protected transformResult(result: any, action: ActionMetadata, options: Action): any {\n    // check if we need to transform result\n    const shouldTransform =\n      this.useClassTransformer && // transform only if class-transformer is enabled\n      action.options.transformResponse !== false && // don't transform if action response transform is disabled\n      result instanceof Object && // don't transform primitive types (string/number/boolean)\n      !(\n        (result instanceof Uint8Array || result.pipe instanceof Function) // don't transform binary data // don't transform streams\n      );\n\n    // transform result if needed\n    if (shouldTransform) {\n      const options = action.responseClassTransformOptions || this.classToPlainTransformOptions;\n      result = classToPlain(result, options);\n    }\n\n    return result;\n  }\n\n  protected processJsonError(error: any) {\n    if (!this.isDefaultErrorHandlingEnabled) return error;\n\n    if (typeof error.toJSON === 'function') return error.toJSON();\n\n    let processedError: any = {};\n    if (error instanceof Error) {\n      const name = error.name && error.name !== 'Error' ? error.name : error.constructor.name;\n      processedError.name = name;\n\n      if (error.message) processedError.message = error.message;\n      if (error.stack && this.developmentMode) processedError.stack = error.stack;\n\n      Object.keys(error)\n        .filter(\n          key =>\n            key !== 'stack' &&\n            key !== 'name' &&\n            key !== 'message' &&\n            (!(error instanceof HttpError) || key !== 'httpCode')\n        )\n        .forEach(key => (processedError[key] = (error as any)[key]));\n\n      if (this.errorOverridingMap)\n        Object.keys(this.errorOverridingMap)\n          .filter(key => name === key)\n          .forEach(key => (processedError = this.merge(processedError, this.errorOverridingMap[key])));\n\n      return Object.keys(processedError).length > 0 ? processedError : undefined;\n    }\n\n    return error;\n  }\n\n  protected processTextError(error: any) {\n    if (!this.isDefaultErrorHandlingEnabled) return error;\n\n    if (error instanceof Error) {\n      if (this.developmentMode && error.stack) {\n        return error.stack;\n      } else if (error.message) {\n        return error.message;\n      }\n    }\n    return error;\n  }\n\n  protected merge(obj1: any, obj2: any): any {\n    const result: any = {};\n    for (const i in obj1) {\n      if (i in obj2 && typeof obj1[i] === 'object' && i !== null) {\n        result[i] = this.merge(obj1[i], obj2[i]);\n      } else {\n        result[i] = obj1[i];\n      }\n    }\n    for (const i in obj2) {\n      result[i] = obj2[i];\n    }\n    return result;\n  }\n\n  /**\n   * Initializes the things driver needs before routes and middleware registration.\n   */\n  abstract initialize(): void;\n\n  /**\n   * Registers given middleware.\n   */\n  abstract registerMiddleware(middleware: MiddlewareMetadata): void;\n\n  /**\n   * Registers action in the driver.\n   */\n  abstract registerAction(action: ActionMetadata, executeCallback: (options: Action) => any): void;\n\n  /**\n   * Registers all routes in the framework.\n   */\n  abstract registerRoutes(): void;\n\n  /**\n   * Gets param from the request.\n   */\n  abstract getParamFromRequest(actionOptions: Action, param: ParamMetadata): any;\n\n  /**\n   * Defines an algorithm of how to handle error during executing controller action.\n   */\n  abstract handleError(error: any, action: ActionMetadata, options: Action): any;\n\n  /**\n   * Defines an algorithm of how to handle success result of executing controller action.\n   */\n  abstract handleSuccess(result: any, action: ActionMetadata, options: Action): void;\n}\n"]}