{"version":3,"file":"runInSequence.js","sourceRoot":"","sources":["../../../src/util/runInSequence.ts"],"names":[],"mappings":";;;AAAA;;;GAGG;AACH,SAAgB,aAAa,CAAO,UAAe,EAAE,QAAiC;IACpF,MAAM,OAAO,GAAQ,EAAE,CAAC;IACxB,OAAO,UAAU;SACd,MAAM,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE;QACxB,OAAO,OAAO;aACX,IAAI,CAAC,GAAG,EAAE;YACT,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC;QACxB,CAAC,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,EAAE;YACb,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC;SACpB,IAAI,CAAC,GAAG,EAAE;QACT,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC,CAAC;AACP,CAAC;AAfD,sCAeC","sourcesContent":["/**\n * Runs given callback that returns promise for each item in the given collection in order.\n * Operations executed after each other, right after previous promise being resolved.\n */\nexport function runInSequence<T, U>(collection: T[], callback: (item: T) => Promise<U>): Promise<U[]> {\n  const results: U[] = [];\n  return collection\n    .reduce((promise, item) => {\n      return promise\n        .then(() => {\n          return callback(item);\n        })\n        .then(result => {\n          results.push(result);\n        });\n    }, Promise.resolve())\n    .then(() => {\n      return results;\n    });\n}\n"]}