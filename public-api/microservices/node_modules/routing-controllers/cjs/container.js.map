{"version":3,"file":"container.js","sourceRoot":"","sources":["../../src/container.ts"],"names":[],"mappings":";;;AAmBA;;;GAGG;AACH,MAAM,gBAAgB,GAA6D,IAAI,CAAC;IAAA;QAC9E,cAAS,GAAsC,EAAE,CAAC;IAU5D,CAAC;IATC,GAAG,CAAI,SAA8B;QACnC,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;QAC5E,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,SAAS,EAAE,EAAE,CAAC;YACxD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC/B;QAED,OAAO,QAAQ,CAAC,MAAM,CAAC;IACzB,CAAC;CACF,CAAC,EAAE,CAAC;AAEL,IAAI,aAAwF,CAAC;AAC7F,IAAI,oBAAyC,CAAC;AAY9C;;GAEG;AACH,SAAgB,YAAY,CAAC,UAAsB,EAAE,OAA6B;IAChF,aAAa,GAAG,UAAU,CAAC;IAC3B,oBAAoB,GAAG,OAAO,CAAC;AACjC,CAAC;AAHD,oCAGC;AAED;;;;GAIG;AACH,SAAgB,gBAAgB,CAAI,SAAyC,EAAE,MAAe;IAC5F,IAAI,aAAa,EAAE;QACjB,IAAI;YACF,MAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACtD,IAAI,QAAQ;gBAAE,OAAO,QAAQ,CAAC;YAE9B,IAAI,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,QAAQ;gBAAE,OAAO,QAAQ,CAAC;SAC9E;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,gBAAgB;gBAAE,MAAM,KAAK,CAAC;SAClF;KACF;IACD,OAAO,gBAAgB,CAAC,GAAG,CAAI,SAAS,CAAC,CAAC;AAC5C,CAAC;AAZD,4CAYC","sourcesContent":["import { Action } from './Action';\n\n/**\n * Container options.\n */\nexport interface UseContainerOptions {\n  /**\n   * If set to true, then default container will be used in the case if given container haven't returned anything.\n   */\n  fallback?: boolean;\n\n  /**\n   * If set to true, then default container will be used in the case if given container thrown an exception.\n   */\n  fallbackOnErrors?: boolean;\n}\n\nexport type ClassConstructor<T> = { new (...args: any[]): T };\n\n/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n */\nconst defaultContainer: { get<T>(someClass: ClassConstructor<T> | Function): T } = new (class {\n  private instances: { type: Function; object: any }[] = [];\n  get<T>(someClass: ClassConstructor<T>): T {\n    let instance = this.instances.find(instance => instance.type === someClass);\n    if (!instance) {\n      instance = { type: someClass, object: new someClass() };\n      this.instances.push(instance);\n    }\n\n    return instance.object;\n  }\n})();\n\nlet userContainer: { get<T>(someClass: ClassConstructor<T> | Function, action?: Action): T };\nlet userContainerOptions: UseContainerOptions;\n\n/**\n * Allows routing controllers to resolve objects using your IoC container\n */\nexport interface IocAdapter {\n  /**\n   * Return\n   */\n  get<T>(someClass: ClassConstructor<T>, action?: Action): T;\n}\n\n/**\n * Sets container to be used by this library.\n */\nexport function useContainer(iocAdapter: IocAdapter, options?: UseContainerOptions) {\n  userContainer = iocAdapter;\n  userContainerOptions = options;\n}\n\n/**\n * Gets the IOC container used by this library.\n * @param someClass A class constructor to resolve\n * @param action The request/response context that `someClass` is being resolved for\n */\nexport function getFromContainer<T>(someClass: ClassConstructor<T> | Function, action?: Action): T {\n  if (userContainer) {\n    try {\n      const instance = userContainer.get(someClass, action);\n      if (instance) return instance;\n\n      if (!userContainerOptions || !userContainerOptions.fallback) return instance;\n    } catch (error) {\n      if (!userContainerOptions || !userContainerOptions.fallbackOnErrors) throw error;\n    }\n  }\n  return defaultContainer.get<T>(someClass);\n}\n"]}