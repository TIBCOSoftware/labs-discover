{"version":3,"file":"ParamNormalizationError.js","sourceRoot":"","sources":["../../../src/error/ParamNormalizationError.ts"],"names":[],"mappings":";;;AAAA,mEAAgE;AAEhE;;GAEG;AACH,MAAa,iBAAkB,SAAQ,iCAAe;IAGpD,YAAY,KAAU,EAAE,aAAqB,EAAE,aAAqB;QAClE,KAAK,CACH,mBAAmB,aAAa,uBAAuB,IAAI,CAAC,SAAS,CACnE,KAAK,CACN,2BAA2B,aAAa,GAAG,CAC7C,CAAC;QAPJ,SAAI,GAAG,yBAAyB,CAAC;QAS/B,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAC3D,CAAC;CACF;AAZD,8CAYC","sourcesContent":["import { BadRequestError } from '../http-error/BadRequestError';\n\n/**\n * Caused when user query parameter is invalid (cannot be parsed into selected type).\n */\nexport class InvalidParamError extends BadRequestError {\n  name = 'ParamNormalizationError';\n\n  constructor(value: any, parameterName: string, parameterType: string) {\n    super(\n      `Given parameter ${parameterName} is invalid. Value (${JSON.stringify(\n        value\n      )}) cannot be parsed into ${parameterType}.`\n    );\n\n    Object.setPrototypeOf(this, InvalidParamError.prototype);\n  }\n}\n"]}