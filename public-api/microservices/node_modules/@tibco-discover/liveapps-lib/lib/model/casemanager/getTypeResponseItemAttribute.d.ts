/**
 * Case Manager Service
 * The TIBCO Cloud(TM) Live Apps Case Manager Service manages the following resources:  * __Types__: A Type contains the essential data definition of a TIBCO(R) Live Apps application - that is, the data fields, data types and states which are created by an application designer when they create an application in Live Apps Designer. There are two sorts of Type:    * __Case__: A Case Type contains the definition of:       * the top-level data fields used by the application. These data fields (referred to hereafter as 'attributes' of the Case) can be either simple types (such as strings or dates), or custom data types (that group together sets of existing data fields to suit the application's purpose).        * the states used by the application.       * details of Case Creator and Case Action processes defined in the application.               * __Structured__: A Structured Type contains the definition of a custom data type used by the application, which also has fields ('attributes').  * __Cases__: A Case is a particular instance of a Case Type. Users use Live Apps Case Manager to start Cases and run them through to completion. A Case contains the particular values of the data fields and states for that Case as it progresses from creation to completion.  __Paginating Results Lists__  By default, the GET /cases and GET /types methods do not return their entire results list. Instead, they return 10 items from the results list, starting from the beginning of the list. You can override this default behaviour by using the following parameters:  * $top - to specify how many items are returned from the results list. ($top must be a value from 1 to 1000.) * $skip - to specify the starting position in the results list from which to return items.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: liveapps@tibco.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AttributeConstraints } from './attributeConstraints';
import { AttributeDisplayPreferences } from './attributeDisplayPreferences';
/**
 * Describes the attributes of a Case or Structured type. Used within  GetTypeResponseItem.
 */
export interface GetTypeResponseItemAttribute {
    /**
     * The name of the attribute, which is automatically derived from the label, as follows:  * Whitespace and non-alphanumeric characters are removed.    * A numeric version number suffix is added, based on the version of the application in which the attribute was added. Attributes in the initial version are suffixed '_v1'. If an application is published and a new draft created, attributes added subsequently will have '_v2', and so on.    Until an application is locked for publication, changes to an attribute's label will prompt corresponding changes to its name; However, if an attribute's label is changed in a later version, then the name will *not* change.  For example, if the application designer names a data field as \"Customer's Name & Address\", that string is used as the attribute label and the attribute name is \"CustomersNameAddress_v1\". If the designer creates a new draft (version 2) of the application and renames the data field as \"Policy Holder Details\", the attribute label changes to \"Policy Holder Details\", but the attribute name remains as \"CustomerNameAddress_v1\".  Note: An exception to this rule is the special State attribute, which has name 'state' and label 'State'.
     */
    name?: string;
    /**
     * The name of the attribute as defined by the application designer in Live Apps Designer.
     */
    label?: string;
    /**
     * If the attribute refers to another Type, the ID of that Type. If the attribute is of a Case Type, then either \"Text\", \"Number\", \"Date\", \"Time\",\"User\",\"Group\",\"Email\" or \"WebLink\".
     */
    type?: string;
    /**
     * If true, this indicates that the value for 'type' is the ID of a Structured Type.
     */
    isStructuredType?: boolean;
    /**
     * true if the attribute is the Type's designated 'identifier' attribute.
     */
    isIdentifier?: boolean;
    /**
     * true if the attribute is the Type's designated 'state' attribute.
     */
    isState?: boolean;
    /**
     * true if the attribute is an array.
     */
    isArray?: boolean;
    /**
     * true if the attribute must be populated
     */
    isMandatory?: boolean;
    constraints?: AttributeConstraints;
    displayPreferences?: AttributeDisplayPreferences;
}
